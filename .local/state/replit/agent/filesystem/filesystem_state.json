{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack trading platform application called \"TradePro\" built with React, Express, and PostgreSQL. The application provides users with trading capabilities, real-time analytics, portfolio management, and authentication features. It follows a modern web architecture with a React frontend, Express backend, and uses Drizzle ORM for database operations.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript and Vite for development and bundling\n- **Styling**: Tailwind CSS with custom CSS variables for theming, supporting dark mode\n- **UI Components**: Comprehensive component library using Radix UI primitives with shadcn/ui design system\n- **Routing**: Client-side routing implemented with Wouter for lightweight navigation\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Charts**: Recharts for financial data visualization and analytics\n- **Animations**: Framer Motion for smooth page transitions and micro-interactions\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework using ES modules\n- **Authentication**: JWT-based authentication with bcrypt for password hashing\n- **Session Storage**: In-memory storage for development (MemStorage class) with interface for easy database migration\n- **API Design**: RESTful API structure with standardized error handling and logging middleware\n- **Development**: Hot module replacement with Vite integration for seamless development experience\n\n## Data Storage\n- **Database**: PostgreSQL with Neon serverless database connection\n- **ORM**: Drizzle ORM with TypeScript-first approach for type-safe database operations\n- **Schema**: Centralized schema definition in shared directory with Zod validation integration\n- **Migrations**: Drizzle Kit for database schema migrations and management\n\n## Authentication & Authorization\n- **Strategy**: JWT tokens stored in localStorage with Bearer token authentication\n- **Password Security**: bcryptjs for secure password hashing with salt rounds\n- **Route Protection**: Middleware-based authentication for protected API endpoints\n- **Session Management**: Token-based sessions with configurable expiration (24 hours default)\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL database hosting with connection pooling\n- **Drizzle ORM**: Modern TypeScript ORM for database operations and migrations\n\n## UI/UX Libraries\n- **Radix UI**: Headless UI primitives for accessible component foundation\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Lucide React**: Consistent icon library for UI elements\n- **Framer Motion**: Animation library for enhanced user experience\n\n## Development Tools\n- **Vite**: Fast build tool with hot module replacement and React plugin support\n- **TypeScript**: Type-safe development with strict configuration\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n## Form & Validation\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Zod**: Runtime type validation and schema definition\n- **Hookform Resolvers**: Integration between React Hook Form and Zod validation\n\n## Charts & Analytics\n- **Recharts**: React charting library built on D3 for financial data visualization\n- **Date-fns**: Modern date utility library for time-based calculations\n\n## Authentication & Security\n- **JSON Web Tokens**: Stateless authentication token standard\n- **bcryptjs**: Password hashing library with configurable salt rounds\n\n## Development Environment\n- **Replit Integration**: Custom Vite plugins for Replit development environment\n- **PostCSS**: CSS processing with Tailwind CSS and Autoprefixer plugins","size_bytes":3886},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"JetBrains Mono\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": { opacity: \"0\", transform: \"translateY(20px)\" },\n          \"100%\": { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        \"slide-up\": {\n          \"0%\": { opacity: \"0\", transform: \"translateY(30px)\" },\n          \"100%\": { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        \"float\": {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-in-out\",\n        \"slide-up\": \"slide-up 0.6s ease-out\",\n        \"float\": \"float 3s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3445},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport jwt from \"jsonwebtoken\";\nimport { insertUserSchema, signinSchema } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\ninterface AuthRequest extends Request {\n  user?: any;\n}\n\n// JWT middleware\nconst authenticateToken = (req: any, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ message: 'Invalid or expired token' });\n    }\n    req.user = user;\n    next();\n  });\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Signup route\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      const user = await storage.createUser(validatedData);\n      \n      // Generate JWT token\n      const token = jwt.sign(\n        { userId: user.id, email: user.email },\n        JWT_SECRET,\n        { expiresIn: '24h' }\n      );\n\n      // Don't send password in response\n      const { password, ...userWithoutPassword } = user;\n      \n      res.status(201).json({\n        message: \"User created successfully\",\n        user: userWithoutPassword,\n        token\n      });\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        const validationError = fromZodError(error);\n        return res.status(400).json({ message: validationError.message });\n      }\n      \n      res.status(400).json({ message: error.message || \"Failed to create user\" });\n    }\n  });\n\n  // Signin route\n  app.post(\"/api/auth/signin\", async (req, res) => {\n    try {\n      const validatedData = signinSchema.parse(req.body);\n      \n      const user = await storage.validateUser(validatedData.email, validatedData.password);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Generate JWT token\n      const token = jwt.sign(\n        { userId: user.id, email: user.email },\n        JWT_SECRET,\n        { expiresIn: '24h' }\n      );\n\n      // Don't send password in response\n      const { password, ...userWithoutPassword } = user;\n      \n      res.json({\n        message: \"Sign in successful\",\n        user: userWithoutPassword,\n        token\n      });\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        const validationError = fromZodError(error);\n        return res.status(400).json({ message: validationError.message });\n      }\n      \n      res.status(400).json({ message: error.message || \"Failed to sign in\" });\n    }\n  });\n\n  // Protected dashboard route\n  app.get(\"/api/user/dashboard\", authenticateToken, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Return mock dashboard data\n      const dashboardData = {\n        user: {\n          id: user.id,\n          email: user.email,\n          fullName: user.fullName,\n        },\n        portfolio: {\n          totalValue: 127532.84,\n          dailyPnL: 1847.92,\n          dailyPnLPercent: 1.47,\n          openPositions: 12,\n          buyingPower: 45267.13,\n        },\n        recentTrades: [\n          {\n            id: 1,\n            symbol: \"AAPL\",\n            action: \"Buy 100 shares\",\n            price: 175.32,\n            pnl: 247.50,\n            timestamp: new Date().toISOString(),\n          },\n          {\n            id: 2,\n            symbol: \"TSLA\", \n            action: \"Sell 50 shares\",\n            price: 267.89,\n            pnl: -132.75,\n            timestamp: new Date().toISOString(),\n          },\n          {\n            id: 3,\n            symbol: \"MSFT\",\n            action: \"Buy 75 shares\", \n            price: 387.45,\n            pnl: 421.13,\n            timestamp: new Date().toISOString(),\n          },\n        ],\n        watchlist: [\n          { symbol: \"AAPL\", name: \"Apple Inc.\", price: 175.32, change: 2.4 },\n          { symbol: \"GOOGL\", name: \"Alphabet Inc.\", price: 2847.63, change: -0.8 },\n          { symbol: \"AMZN\", name: \"Amazon.com Inc.\", price: 3134.26, change: 1.7 },\n        ],\n        marketOverview: {\n          sp500: { value: 4327.81, change: 0.82 },\n          nasdaq: { value: 13567.98, change: -0.34 },\n          dow: { value: 34721.12, change: 1.15 },\n        },\n      };\n\n      res.json(dashboardData);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Protected profile route\n  app.get(\"/api/user/profile\", authenticateToken, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Return mock profile data\n      const profileData = {\n        id: user.id,\n        email: user.email,\n        fullName: user.fullName,\n        accountType: \"Premium\",\n        memberSince: \"January 2023\",\n        totalTrades: 247,\n        successRate: 73.6,\n        verificationStatus: \"Verified\",\n        twoFactorEnabled: true,\n        lastLogin: \"Today at 10:23 AM\",\n      };\n\n      res.json(profileData);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch profile data\" });\n    }\n  });\n\n  // Bot endpoints\n  app.get(\"/api/bots\", authenticateToken, async (req: any, res) => {\n    try {\n      // Mock bot data\n      const bots = [\n        {\n          id: \"bot1\",\n          name: \"Momentum Trader\",\n          status: \"active\",\n          strategy: \"Momentum Trading\",\n          capital: 10000,\n          maxRisk: 2,\n          profitTarget: 10,\n          stopLoss: 5,\n          createdAt: new Date().toISOString(),\n          performance: {\n            totalTrades: 245,\n            winRate: 73.5,\n            totalPnL: 2847.32,\n            monthlyReturn: 12.4\n          }\n        },\n        {\n          id: \"bot2\",\n          name: \"Scalper Pro\",\n          status: \"paused\",\n          strategy: \"Scalping\",\n          capital: 5000,\n          maxRisk: 1.5,\n          profitTarget: 5,\n          stopLoss: 3,\n          createdAt: new Date().toISOString(),\n          performance: {\n            totalTrades: 567,\n            winRate: 68.2,\n            totalPnL: 1234.56,\n            monthlyReturn: 8.7\n          }\n        }\n      ];\n      res.json(bots);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch bots\" });\n    }\n  });\n\n  app.post(\"/api/bots\", authenticateToken, async (req: any, res) => {\n    try {\n      const { name, strategy, capital, maxRisk, profitTarget, stopLoss } = req.body;\n      const newBot = {\n        id: `bot${Date.now()}`,\n        name,\n        strategy,\n        capital,\n        maxRisk,\n        profitTarget,\n        stopLoss,\n        status: \"stopped\",\n        createdAt: new Date().toISOString(),\n        performance: {\n          totalTrades: 0,\n          winRate: 0,\n          totalPnL: 0,\n          monthlyReturn: 0\n        }\n      };\n      res.status(201).json({ message: \"Bot created successfully\", bot: newBot });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to create bot\" });\n    }\n  });\n\n  app.post(\"/api/bots/:id/start\", authenticateToken, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      res.json({ message: \"Bot started successfully\", botId: id });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to start bot\" });\n    }\n  });\n\n  app.post(\"/api/bots/:id/pause\", authenticateToken, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      res.json({ message: \"Bot paused successfully\", botId: id });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to pause bot\" });\n    }\n  });\n\n  // Signal endpoints\n  app.get(\"/api/signals\", authenticateToken, async (req: any, res) => {\n    try {\n      const signals = [\n        {\n          id: \"signal1\",\n          symbol: \"AAPL\",\n          action: \"BUY\",\n          price: 175.32,\n          targetPrice: 185.00,\n          stopLoss: 168.50,\n          confidence: 87,\n          timeframe: \"4H\",\n          strategy: \"Breakout Pattern\",\n          status: \"active\",\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: \"signal2\",\n          symbol: \"TSLA\",\n          action: \"SELL\",\n          price: 267.89,\n          targetPrice: 250.00,\n          stopLoss: 275.00,\n          confidence: 73,\n          timeframe: \"1D\",\n          strategy: \"RSI Overbought\",\n          status: \"active\",\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: \"signal3\",\n          symbol: \"GOOGL\",\n          action: \"BUY\",\n          price: 2847.63,\n          targetPrice: 2950.00,\n          stopLoss: 2780.00,\n          confidence: 92,\n          timeframe: \"1W\",\n          strategy: \"Support Bounce\",\n          status: \"executed\",\n          pnl: 342.18,\n          createdAt: new Date(Date.now() - 86400000).toISOString()\n        }\n      ];\n      res.json(signals);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch signals\" });\n    }\n  });\n\n  app.post(\"/api/signals/:id/execute\", authenticateToken, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      res.json({ message: \"Signal executed successfully\", signalId: id });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to execute signal\" });\n    }\n  });\n\n  // Copy Expert endpoints\n  app.get(\"/api/copy-experts\", authenticateToken, async (req: any, res) => {\n    try {\n      const experts = [\n        {\n          id: \"expert1\",\n          name: \"Sarah Johnson\",\n          username: \"cryptoqueen\",\n          avatar: \"/avatars/sarah.jpg\",\n          rating: 4.8,\n          followers: 12450,\n          following: false,\n          performance: {\n            totalReturn: 247.8,\n            monthlyReturn: 18.2,\n            winRate: 76.3,\n            totalTrades: 1024,\n            riskScore: 3.2\n          },\n          strategies: [\"Swing Trading\", \"Technical Analysis\", \"Risk Management\"],\n          description: \"Professional trader with 8+ years experience in crypto and forex markets. Specializes in medium-term swing trades with excellent risk management.\",\n          copyFee: 20,\n          minCopyAmount: 500\n        },\n        {\n          id: \"expert2\",\n          name: \"Michael Chen\",\n          username: \"tradingpro\",\n          rating: 4.6,\n          followers: 8934,\n          following: true,\n          performance: {\n            totalReturn: 189.4,\n            monthlyReturn: 14.7,\n            winRate: 68.9,\n            totalTrades: 756,\n            riskScore: 2.8\n          },\n          strategies: [\"Day Trading\", \"Scalping\", \"News Trading\"],\n          description: \"Full-time day trader focusing on high-frequency strategies and news-based trading. Conservative risk approach with consistent returns.\",\n          copyFee: 15,\n          minCopyAmount: 1000\n        }\n      ];\n      res.json(experts);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch experts\" });\n    }\n  });\n\n  app.post(\"/api/copy-experts/:id/follow\", authenticateToken, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      res.json({ message: \"Expert followed successfully\", expertId: id });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to follow expert\" });\n    }\n  });\n\n  app.post(\"/api/copy-experts/:id/copy\", authenticateToken, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { amount } = req.body;\n      res.json({ message: \"Copy trading started successfully\", expertId: id, amount });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to start copy trading\" });\n    }\n  });\n\n  // Bitcoin Wallet endpoints\n  app.get(\"/api/wallet/bitcoin\", authenticateToken, async (req: any, res) => {\n    try {\n      const walletData = {\n        address: \"bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\",\n        balance: 0.05423789,\n        pendingDeposits: 0.001\n      };\n      res.json(walletData);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch wallet data\" });\n    }\n  });\n\n  app.get(\"/api/wallet/bitcoin/deposits\", authenticateToken, async (req: any, res) => {\n    try {\n      const deposits = [\n        {\n          id: \"dep1\",\n          amount: 0.001,\n          address: \"bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\",\n          status: \"pending\",\n          confirmations: 2,\n          requiredConfirmations: 3,\n          network: \"Bitcoin\",\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: \"dep2\",\n          amount: 0.0234,\n          address: \"bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\",\n          txHash: \"a1b2c3d4e5f6789012345678901234567890abcdef123456789012345678901234\",\n          status: \"confirmed\",\n          confirmations: 6,\n          requiredConfirmations: 3,\n          network: \"Bitcoin\",\n          createdAt: new Date(Date.now() - 3600000).toISOString()\n        }\n      ];\n      res.json(deposits);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch deposit history\" });\n    }\n  });\n\n  // Withdrawal endpoints\n  app.get(\"/api/wallet/balance\", authenticateToken, async (req: any, res) => {\n    try {\n      const balance = {\n        btc: 0.05423789,\n        usd: 15420.50\n      };\n      res.json(balance);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch balance\" });\n    }\n  });\n\n  app.get(\"/api/wallet/withdrawals\", authenticateToken, async (req: any, res) => {\n    try {\n      const withdrawals = [\n        {\n          id: \"with1\",\n          amount: 0.01,\n          currency: \"btc\",\n          address: \"bc1qabcdef123456789012345678901234567890xyz\",\n          fee: 0.0005,\n          status: \"processing\",\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: \"with2\",\n          amount: 500,\n          currency: \"usd\",\n          address: \"Bank Account ****1234\",\n          fee: 5,\n          status: \"completed\",\n          txHash: \"TXN123456789\",\n          createdAt: new Date(Date.now() - 86400000).toISOString()\n        }\n      ];\n      res.json(withdrawals);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch withdrawal history\" });\n    }\n  });\n\n  app.post(\"/api/wallet/withdraw\", authenticateToken, async (req: any, res) => {\n    try {\n      const { amount, currency, address } = req.body;\n      \n      // Enhanced validation\n      if (!amount || amount <= 0 || isNaN(amount)) {\n        return res.status(400).json({ message: \"Please enter a valid amount greater than 0\" });\n      }\n      \n      if (!address || !address.trim()) {\n        return res.status(400).json({ message: \"Withdrawal address is required\" });\n      }\n      \n      if (!currency || !['btc', 'usd'].includes(currency.toLowerCase())) {\n        return res.status(400).json({ message: \"Invalid currency selected\" });\n      }\n\n      // Enhanced balance and minimum checks\n      const balances = { btc: 0.05423789, usd: 15420.50 };\n      const availableBalance = currency === 'btc' ? balances.btc : balances.usd;\n      const minimumWithdraw = currency === 'btc' ? 0.001 : 10;\n      const fee = currency === 'btc' ? 0.0005 : 5;\n      \n      if (amount < minimumWithdraw) {\n        return res.status(400).json({ \n          message: `Minimum withdrawal amount is ${currency === 'btc' ? '0.001 BTC' : '$10'}` \n        });\n      }\n      \n      if (amount > availableBalance) {\n        return res.status(400).json({ \n          message: `Insufficient balance. Available: ${availableBalance} ${currency.toUpperCase()}` \n        });\n      }\n      \n      // Check if amount covers the fee\n      if (amount <= fee) {\n        return res.status(400).json({ \n          message: `Amount must be greater than network fee of ${currency === 'btc' ? '0.0005 BTC' : '$5'}` \n        });\n      }\n\n      // Enhanced address validation\n      if (currency === 'btc') {\n        // Basic Bitcoin address validation\n        if (!address.match(/^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,62}$/)) {\n          return res.status(400).json({ message: \"Invalid Bitcoin address format\" });\n        }\n      }\n\n      const withdrawal = {\n        id: `with${Date.now()}`,\n        amount: parseFloat(amount.toFixed(currency === 'btc' ? 8 : 2)),\n        currency: currency.toLowerCase(),\n        address: address.trim(),\n        fee,\n        netAmount: amount - fee,\n        status: \"pending\",\n        createdAt: new Date().toISOString()\n      };\n      \n      res.status(201).json({ \n        message: \"Withdrawal request submitted successfully\", \n        withdrawal,\n        estimatedArrival: currency === 'btc' ? '30-60 minutes' : '1-3 business days'\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to process withdrawal\" });\n    }\n  });\n  \n  // Market Analysis endpoints\n  app.get(\"/api/market/analysis\", authenticateToken, async (req: any, res) => {\n    try {\n      const marketData = [\n        {\n          symbol: \"AAPL\",\n          name: \"Apple Inc.\",\n          price: 175.32,\n          change: 4.23,\n          changePercent: 2.47,\n          volume: 89234567,\n          marketCap: 2756789000000,\n          analysis: {\n            recommendation: \"BUY\",\n            confidence: 87,\n            supportLevel: 168.50,\n            resistanceLevel: 182.00,\n            rsi: 64.2,\n            macd: \"Bullish\",\n            sentiment: \"Bullish\"\n          },\n          news: [\n            {\n              title: \"Apple Reports Strong Q4 Earnings\",\n              summary: \"Apple exceeded expectations with iPhone sales driving revenue growth.\",\n              impact: \"positive\",\n              timestamp: new Date().toISOString()\n            },\n            {\n              title: \"New iPhone Models Drive Market Interest\",\n              summary: \"Latest iPhone release showing strong pre-order numbers.\",\n              impact: \"positive\",\n              timestamp: new Date(Date.now() - 3600000).toISOString()\n            }\n          ]\n        },\n        {\n          symbol: \"TSLA\",\n          name: \"Tesla Inc.\",\n          price: 267.89,\n          change: -8.45,\n          changePercent: -3.06,\n          volume: 45678901,\n          marketCap: 856789000000,\n          analysis: {\n            recommendation: \"HOLD\",\n            confidence: 73,\n            supportLevel: 255.00,\n            resistanceLevel: 280.00,\n            rsi: 45.8,\n            macd: \"Bearish\",\n            sentiment: \"Neutral\"\n          },\n          news: [\n            {\n              title: \"Tesla Production Numbers Mixed\",\n              summary: \"Q4 production met expectations but guidance remains cautious.\",\n              impact: \"neutral\",\n              timestamp: new Date(Date.now() - 7200000).toISOString()\n            }\n          ]\n        },\n        {\n          symbol: \"GOOGL\",\n          name: \"Alphabet Inc.\",\n          price: 2847.63,\n          change: 12.89,\n          changePercent: 0.45,\n          volume: 23456789,\n          marketCap: 1823456000000,\n          analysis: {\n            recommendation: \"BUY\",\n            confidence: 92,\n            supportLevel: 2780.00,\n            resistanceLevel: 2950.00,\n            rsi: 58.4,\n            macd: \"Bullish\",\n            sentiment: \"Bullish\"\n          },\n          news: [\n            {\n              title: \"Google AI Advances Show Promise\",\n              summary: \"New AI developments position Google strongly in the market.\",\n              impact: \"positive\",\n              timestamp: new Date(Date.now() - 1800000).toISOString()\n            }\n          ]\n        },\n        {\n          symbol: \"MSFT\",\n          name: \"Microsoft Corporation\",\n          price: 387.45,\n          change: 2.67,\n          changePercent: 0.69,\n          volume: 34567890,\n          marketCap: 2876543000000,\n          analysis: {\n            recommendation: \"BUY\",\n            confidence: 85,\n            supportLevel: 375.00,\n            resistanceLevel: 400.00,\n            rsi: 61.2,\n            macd: \"Bullish\",\n            sentiment: \"Bullish\"\n          },\n          news: [\n            {\n              title: \"Microsoft Cloud Revenue Grows\",\n              summary: \"Azure and Office 365 continue strong growth trajectory.\",\n              impact: \"positive\",\n              timestamp: new Date(Date.now() - 5400000).toISOString()\n            }\n          ]\n        }\n      ];\n      res.json(marketData);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch market analysis\" });\n    }\n  });\n  \n  app.get(\"/api/market/indices\", authenticateToken, async (req: any, res) => {\n    try {\n      const indices = {\n        sp500: { value: 4327.81, change: 0.82 },\n        nasdaq: { value: 13567.98, change: -0.34 },\n        dow: { value: 34721.12, change: 1.15 },\n        vix: { value: 18.42, change: -2.1 }\n      };\n      res.json(indices);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to fetch market indices\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":21794},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  validateUser(email: string, password: string): Promise<User | null>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const existingUser = await this.getUserByEmail(insertUser.email);\n    if (existingUser) {\n      throw new Error(\"User with this email already exists\");\n    }\n\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      password: hashedPassword,\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async validateUser(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user) {\n      return null;\n    }\n\n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1602},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  password: true,\n  fullName: true,\n});\n\nexport const signinSchema = createInsertSchema(users).pick({\n  email: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type SigninUser = z.infer<typeof signinSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":850},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Navbar } from \"@/components/navbar\";\nimport { FooterBottom } from \"@/components/footer\";\nimport Home from \"@/pages/home\";\nimport About from \"@/pages/about\";\nimport Signup from \"@/pages/signup\";\nimport Signin from \"@/pages/signin\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Profile from \"@/pages/profile\";\nimport BuyBitcoin from \"@/pages/buy-bitcoin\";\nimport Bot from \"@/pages/bot\";\nimport Signal from \"@/pages/signal\";\nimport CopyExpert from \"@/pages/copy-expert\";\nimport DepositBitcoin from \"@/pages/deposit-bitcoin\";\nimport Withdraw from \"@/pages/withdraw\";\nimport MarketAnalysis from \"@/pages/market-analysis\";\nimport Assets from \"@/pages/assets\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/signup\" component={Signup} />\n      <Route path=\"/signin\" component={Signin} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/dashboard/profile\" component={Profile} />\n      <Route path=\"/dashboard/buy-bitcoin\" component={BuyBitcoin} />\n      <Route path=\"/dashboard/bot\" component={Bot} />\n      <Route path=\"/dashboard/signal\" component={Signal} />\n      <Route path=\"/dashboard/copyexpert\" component={CopyExpert} />\n      <Route path=\"/dashboard/deposit-bitcoin\" component={DepositBitcoin} />\n      <Route path=\"/dashboard/withdraw\" component={Withdraw} />\n      <Route path=\"/market-analysis\" component={MarketAnalysis} />\n      <Route path=\"/dashboard/assets\" component={Assets} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background text-foreground\">\n          <Navbar />\n          <Router />\n          <FooterBottom />\n          <Toaster />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2255},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Dark theme colors matching the design reference */\n  --background: hsl(222, 20%, 11%);\n  --foreground: hsl(210, 40%, 96%);\n  --card: hsl(222, 20%, 11%);\n  --card-foreground: hsl(210, 40%, 96%);\n  --popover: hsl(222, 20%, 11%);\n  --popover-foreground: hsl(210, 40%, 96%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 4%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(159, 80%, 40%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(159, 80%, 40%);\n  --chart-3: hsl(32, 95%, 44%);\n  --chart-4: hsl(346, 87%, 43%);\n  --chart-5: hsl(262, 83%, 58%);\n  --radius: 12px;\n  \n  /* Custom font variables */\n  --font-sans: 'Inter', sans-serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  \n  /* Sidebar variables */\n  --sidebar-background: hsl(217, 32%, 17%);\n  --sidebar-foreground: hsl(210, 40%, 96%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(222, 84%, 4%);\n  --sidebar-accent: hsl(217, 32%, 22%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n}\n\n.dark {\n  --background: hsl(222, 20%, 11%);\n  --foreground: hsl(210, 40%, 96%);\n  --card: hsl(222, 20%, 11%);\n  --card-foreground: hsl(210, 40%, 96%);\n  --popover: hsl(222, 20%, 11%);\n  --popover-foreground: hsl(210, 40%, 96%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 4%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(159, 80%, 40%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(159, 80%, 40%);\n  --chart-3: hsl(32, 95%, 44%);\n  --chart-4: hsl(346, 87%, 43%);\n  --chart-5: hsl(262, 83%, 58%);\n  \n  /* Sidebar variables for dark mode */\n  --sidebar-background: hsl(217, 32%, 17%);\n  --sidebar-foreground: hsl(210, 40%, 96%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(222, 84%, 4%);\n  --sidebar-accent: hsl(217, 32%, 22%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased;\n    background: linear-gradient(135deg, hsl(222, 20%, 8%) 0%, hsl(217, 32%, 12%) 100%);\n    font-family: var(--font-sans);\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold;\n  }\n}\n\n@layer components {\n  /* Glassmorphism card effect */\n  .glass-card {\n    background: rgba(30, 41, 59, 0.4);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  /* Gradient border effect */\n  .gradient-border {\n    background: linear-gradient(135deg, hsl(217, 91%, 60%), hsl(159, 80%, 40%));\n    padding: 1px;\n    border-radius: 12px;\n  }\n\n  .gradient-border > div {\n    background: hsl(222, 20%, 11%);\n    border-radius: 11px;\n  }\n\n  /* Chart placeholder with shimmer effect */\n  .chart-placeholder {\n    background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(16, 185, 129, 0.1) 100%);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .chart-placeholder::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);\n    animation: shimmer 2s infinite;\n  }\n}\n\n@layer utilities {\n  /* Custom animations */\n  @keyframes fadeIn {\n    from { \n      opacity: 0; \n      transform: translateY(20px); \n    }\n    to { \n      opacity: 1; \n      transform: translateY(0); \n    }\n  }\n\n  @keyframes slideUp {\n    from { \n      opacity: 0; \n      transform: translateY(30px); \n    }\n    to { \n      opacity: 1; \n      transform: translateY(0); \n    }\n  }\n\n  @keyframes float {\n    0%, 100% { \n      transform: translateY(0px); \n    }\n    50% { \n      transform: translateY(-10px); \n    }\n  }\n\n  @keyframes shimmer {\n    0% { \n      left: -100%; \n    }\n    100% { \n      left: 100%; \n    }\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.6s ease-out;\n  }\n\n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n}\n","size_bytes":4973},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/chart-widget.tsx":{"content":"import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Area, AreaChart } from \"recharts\";\n\ninterface ChartData {\n  time: string;\n  value: number;\n}\n\ninterface ChartWidgetProps {\n  data?: ChartData[];\n  title?: string;\n  height?: number;\n}\n\n// Generate sample chart data for demonstration with more realistic market behavior\nconst generateSampleData = (): ChartData[] => {\n  const data: ChartData[] = [];\n  const now = new Date();\n  let baseValue = 125000;\n  \n  for (let i = 29; i >= 0; i--) {\n    const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n    // More realistic market volatility with trending behavior\n    const dailyChange = (Math.random() - 0.48) * 0.03; // Slight bullish bias\n    baseValue = baseValue * (1 + dailyChange);\n    \n    data.push({\n      time: date.toLocaleDateString(),\n      value: Math.round(baseValue),\n    });\n  }\n  \n  return data;\n};\n\nexport function ChartWidget({ data, title = \"Portfolio Performance\", height = 320 }: ChartWidgetProps) {\n  const chartData = data || generateSampleData();\n  \n  // Calculate if portfolio is gaining or losing\n  const firstValue = chartData[0]?.value || 0;\n  const lastValue = chartData[chartData.length - 1]?.value || 0;\n  const isGaining = lastValue > firstValue;\n  const changePercent = ((lastValue - firstValue) / firstValue * 100).toFixed(2);\n\n  return (\n    <div className=\"w-full\" style={{ height }}>\n      <div className=\"mb-4 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <div className={`w-3 h-3 rounded-full ${\n            isGaining ? 'bg-green-500' : 'bg-red-500'\n          }`}></div>\n          <span className=\"text-sm text-muted-foreground\">\n            {isGaining ? 'Up' : 'Down'} {Math.abs(Number(changePercent))}% this period\n          </span>\n        </div>\n      </div>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart data={chartData}>\n          <defs>\n            <linearGradient id=\"portfolioGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop \n                offset=\"5%\" \n                stopColor={isGaining ? \"#10b981\" : \"#ef4444\"} \n                stopOpacity={0.3}\n              />\n              <stop \n                offset=\"95%\" \n                stopColor={isGaining ? \"#10b981\" : \"#ef4444\"} \n                stopOpacity={0.05}\n              />\n            </linearGradient>\n          </defs>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" opacity={0.3} />\n          <XAxis \n            dataKey=\"time\" \n            stroke=\"hsl(var(--muted-foreground))\"\n            fontSize={12}\n            axisLine={false}\n            tickLine={false}\n          />\n          <YAxis \n            stroke=\"hsl(var(--muted-foreground))\"\n            fontSize={12}\n            axisLine={false}\n            tickLine={false}\n            tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n          />\n          <Tooltip\n            contentStyle={{\n              backgroundColor: \"hsl(var(--card))\",\n              border: \"1px solid hsl(var(--border))\",\n              borderRadius: \"12px\",\n              color: \"hsl(var(--foreground))\",\n              boxShadow: \"0 10px 30px rgba(0,0,0,0.1)\",\n            }}\n            formatter={(value: number) => [\n              `$${value.toLocaleString()}`, \n              \"Portfolio Value\"\n            ]}\n            labelStyle={{ color: \"hsl(var(--muted-foreground))\" }}\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={isGaining ? \"#10b981\" : \"#ef4444\"}\n            strokeWidth={3}\n            fill=\"url(#portfolioGradient)\"\n            dot={false}\n            activeDot={{ \n              r: 6, \n              fill: isGaining ? \"#10b981\" : \"#ef4444\",\n              strokeWidth: 2,\n              stroke: \"white\"\n            }}\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","size_bytes":3940},"client/src/components/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Menu, X, TrendingUp } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\n\nexport function Navbar() {\n  const [location, navigate] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const isAuthenticated = authService.isAuthenticated();\n\n  const handleSignOut = () => {\n    authService.removeToken();\n    navigate(\"/signin\");\n  };\n\n  const navItems = [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/about\", label: \"About\" },\n  ];\n\n  return (\n    <nav className=\"fixed top-0 w-full z-50 glass-card border-b border-border/50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-accent rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"text-white text-sm\" />\n            </div>\n            <span className=\"text-xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              TradePro\n            </span>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navItems.map((item) => (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={`transition-colors duration-200 ${\n                  location === item.href\n                    ? \"text-primary\"\n                    : \"text-muted-foreground hover:text-foreground\"\n                }`}\n                data-testid={`nav-link-${item.label.toLowerCase()}`}\n              >\n                {item.label}\n              </Link>\n            ))}\n            \n            <div className=\"flex items-center space-x-4\">\n              {isAuthenticated ? (\n                <>\n                  <Link href=\"/dashboard\">\n                    <Button variant=\"ghost\" data-testid=\"nav-dashboard\">\n                      Dashboard\n                    </Button>\n                  </Link>\n                  <Button \n                    variant=\"ghost\" \n                    onClick={handleSignOut}\n                    data-testid=\"nav-signout\"\n                  >\n                    Sign Out\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <Link href=\"/signin\">\n                    <Button variant=\"ghost\" data-testid=\"nav-signin\">\n                      Sign In\n                    </Button>\n                  </Link>\n                  <Link href=\"/signup\">\n                    <Button data-testid=\"nav-signup\">\n                      Get Started\n                    </Button>\n                  </Link>\n                </>\n              )}\n            </div>\n          </div>\n\n          {/* Mobile Menu Button */}\n          <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n            <SheetTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\" data-testid=\"mobile-menu-button\">\n                <Menu className=\"h-6 w-6\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"glass-card border-border\">\n              <div className=\"flex flex-col space-y-6 mt-6\">\n                {navItems.map((item) => (\n                  <Link\n                    key={item.href}\n                    href={item.href}\n                    className=\"text-lg text-muted-foreground hover:text-foreground transition-colors\"\n                    onClick={() => setIsMobileMenuOpen(false)}\n                    data-testid={`mobile-nav-${item.label.toLowerCase()}`}\n                  >\n                    {item.label}\n                  </Link>\n                ))}\n                <hr className=\"border-border\" />\n                \n                {isAuthenticated ? (\n                  <>\n                    <Link href=\"/dashboard\" onClick={() => setIsMobileMenuOpen(false)}>\n                      <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"mobile-nav-dashboard\">\n                        Dashboard\n                      </Button>\n                    </Link>\n                    <Button \n                      variant=\"ghost\" \n                      className=\"w-full justify-start\"\n                      onClick={() => {\n                        handleSignOut();\n                        setIsMobileMenuOpen(false);\n                      }}\n                      data-testid=\"mobile-nav-signout\"\n                    >\n                      Sign Out\n                    </Button>\n                  </>\n                ) : (\n                  <>\n                    <Link href=\"/signin\" onClick={() => setIsMobileMenuOpen(false)}>\n                      <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"mobile-nav-signin\">\n                        Sign In\n                      </Button>\n                    </Link>\n                    <Link href=\"/signup\" onClick={() => setIsMobileMenuOpen(false)}>\n                      <Button className=\"w-full justify-start\" data-testid=\"mobile-nav-signup\">\n                        Get Started\n                      </Button>\n                    </Link>\n                  </>\n                )}\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5655},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"interface AuthResponse {\n  user: {\n    id: string;\n    email: string;\n    fullName: string;\n  };\n  token: string;\n  message: string;\n}\n\nexport const authService = {\n  setToken: (token: string) => {\n    localStorage.setItem('authToken', token);\n  },\n\n  getToken: (): string | null => {\n    return localStorage.getItem('authToken');\n  },\n\n  removeToken: () => {\n    localStorage.removeItem('authToken');\n  },\n\n  isAuthenticated: (): boolean => {\n    const token = authService.getToken();\n    return !!token;\n  },\n\n  getAuthHeaders: () => {\n    const token = authService.getToken();\n    return token ? { Authorization: `Bearer ${token}` } : {};\n  },\n};\n","size_bytes":650},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { authService } from \"./auth\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: Record<string, string> = {};\n  \n  // Add auth headers if token exists\n  const authHeaders = authService.getAuthHeaders();\n  if (authHeaders.Authorization) {\n    headers.Authorization = authHeaders.Authorization;\n  }\n\n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const headers: Record<string, string> = {};\n    \n    // Add auth headers if token exists\n    const authHeaders = authService.getAuthHeaders();\n    if (authHeaders.Authorization) {\n      headers.Authorization = authHeaders.Authorization;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1935},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { User, BarChart3 } from \"lucide-react\";\n\nconst fadeInUp = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0 },\n  transition: { duration: 0.6 }\n};\n\nconst staggerContainer = {\n  animate: {\n    transition: {\n      staggerChildren: 0.1\n    }\n  }\n};\n\nconst stats = [\n  { value: \"250K+\", label: \"Active Traders\" },\n  { value: \"$2.1B\", label: \"Volume Traded\" },\n  { value: \"99.9%\", label: \"Uptime\" },\n  { value: \"150+\", label: \"Markets\" }\n];\n\nconst team = [\n  {\n    name: \"Sarah Chen\",\n    role: \"CEO & Co-Founder\",\n    description: \"Former Goldman Sachs VP with 15+ years in fintech innovation\"\n  },\n  {\n    name: \"Marcus Rodriguez\", \n    role: \"CTO & Co-Founder\",\n    description: \"Ex-Stripe engineer specializing in high-frequency trading systems\"\n  },\n  {\n    name: \"Emily Johnson\",\n    role: \"Head of Security\", \n    description: \"Cybersecurity expert with background in financial compliance\"\n  }\n];\n\nexport default function About() {\n  return (\n    <div className=\"pt-16\">\n      <section className=\"py-24 px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto\">\n        <motion.div \n          className=\"text-center mb-16\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <h1 className=\"text-5xl font-bold mb-6 bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n            About TradePro\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Empowering traders with cutting-edge technology and professional-grade tools\n          </p>\n        </motion.div>\n\n        {/* Mission Statement */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n        >\n          <Card className=\"glass-card p-12 mb-16\">\n            <CardContent className=\"p-0\">\n              <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n                <div>\n                  <h2 className=\"text-3xl font-bold mb-6\">Our Mission</h2>\n                  <p className=\"text-lg text-muted-foreground mb-6 leading-relaxed\">\n                    At TradePro, we believe that everyone deserves access to professional-grade trading tools. Our mission is to democratize trading by providing intuitive, powerful, and secure platforms that level the playing field for all investors.\n                  </p>\n                  <p className=\"text-lg text-muted-foreground leading-relaxed\">\n                    We combine cutting-edge technology with user-friendly design to create trading experiences that are both powerful and accessible.\n                  </p>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"chart-placeholder h-80 rounded-xl flex items-center justify-center bg-gradient-to-r from-primary/10 to-accent/10\">\n                    <BarChart3 className=\"text-primary text-6xl opacity-50\" />\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Stats Grid */}\n        <motion.div \n          className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16\"\n          variants={staggerContainer}\n          initial=\"initial\"\n          whileInView=\"animate\"\n          viewport={{ once: true }}\n        >\n          {stats.map((stat, index) => (\n            <motion.div key={stat.label} variants={fadeInUp}>\n              <Card className=\"glass-card p-8 text-center\">\n                <CardContent className=\"p-0\">\n                  <div className=\"text-4xl font-bold text-primary mb-2\">{stat.value}</div>\n                  <div className=\"text-muted-foreground\">{stat.label}</div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </motion.div>\n\n        {/* Team Section */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n        >\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Leadership Team</h2>\n          </div>\n          \n          <motion.div \n            className=\"grid md:grid-cols-3 gap-8\"\n            variants={staggerContainer}\n            initial=\"initial\"\n            whileInView=\"animate\"\n            viewport={{ once: true }}\n          >\n            {team.map((member, index) => (\n              <motion.div key={member.name} variants={fadeInUp}>\n                <Card className=\"glass-card p-8 text-center h-full\">\n                  <CardContent className=\"p-0\">\n                    <div className={`w-24 h-24 bg-gradient-to-r ${\n                      index % 2 === 0 ? 'from-primary to-accent' : 'from-accent to-primary'\n                    } rounded-full mx-auto mb-6 flex items-center justify-center`}>\n                      <User className=\"text-white text-2xl\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2\">{member.name}</h3>\n                    <p className={`mb-4 ${\n                      index % 2 === 0 ? 'text-primary' : 'text-accent'\n                    }`}>{member.role}</p>\n                    <p className=\"text-muted-foreground text-sm\">{member.description}</p>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </motion.div>\n        </motion.div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":5678},"client/src/pages/assets.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Wallet, \n  TrendingUp, \n  TrendingDown,\n  Search,\n  Bitcoin,\n  Building,\n  Landmark,\n  Gem,\n  Zap,\n  DollarSign,\n  Plus,\n  Eye,\n  MoreHorizontal\n} from \"lucide-react\";\n\ninterface Asset {\n  id: string;\n  symbol: string;\n  name: string;\n  type: 'stock' | 'crypto' | 'bond' | 'commodity' | 'fund';\n  price: number;\n  change: number;\n  changePercent: number;\n  marketCap?: string;\n  volume: string;\n  holdings?: number;\n  value?: number;\n  icon?: string;\n}\n\nconst userAssets: Asset[] = [\n  {\n    id: \"1\",\n    symbol: \"AAPL\",\n    name: \"Apple Inc.\",\n    type: \"stock\",\n    price: 175.24,\n    change: 2.15,\n    changePercent: 1.24,\n    marketCap: \"2.8T\",\n    volume: \"45.2M\",\n    holdings: 10,\n    value: 1752.40,\n    icon: \"🍎\"\n  },\n  {\n    id: \"2\",\n    symbol: \"BTC\",\n    name: \"Bitcoin\",\n    type: \"crypto\",\n    price: 67234.12,\n    change: 1542.33,\n    changePercent: 2.34,\n    marketCap: \"1.3T\",\n    volume: \"28.5B\",\n    holdings: 0.025,\n    value: 1680.85,\n    icon: \"₿\"\n  },\n  {\n    id: \"3\",\n    symbol: \"TSLA\",\n    name: \"Tesla Inc.\",\n    type: \"stock\",\n    price: 242.68,\n    change: -5.42,\n    changePercent: -2.18,\n    marketCap: \"773B\",\n    volume: \"78.3M\",\n    holdings: 5,\n    value: 1213.40,\n    icon: \"🚗\"\n  },\n  {\n    id: \"4\",\n    symbol: \"ETH\",\n    name: \"Ethereum\",\n    type: \"crypto\",\n    price: 3456.78,\n    change: 89.23,\n    changePercent: 2.65,\n    marketCap: \"415B\",\n    volume: \"15.2B\",\n    holdings: 0.8,\n    value: 2765.42,\n    icon: \"Ξ\"\n  },\n  {\n    id: \"5\",\n    symbol: \"GOVT\",\n    name: \"US Treasury Bond ETF\",\n    type: \"bond\",\n    price: 23.45,\n    change: 0.12,\n    changePercent: 0.51,\n    marketCap: \"4.2B\",\n    volume: \"2.1M\",\n    holdings: 100,\n    value: 2345.00,\n    icon: \"🏛️\"\n  },\n  {\n    id: \"6\",\n    symbol: \"GLD\",\n    name: \"Gold ETF\",\n    type: \"commodity\",\n    price: 189.23,\n    change: 3.45,\n    changePercent: 1.86,\n    marketCap: \"67B\",\n    volume: \"8.9M\",\n    holdings: 15,\n    value: 2838.45,\n    icon: \"🥇\"\n  }\n];\n\nconst availableAssets: Asset[] = [\n  {\n    id: \"7\",\n    symbol: \"MSFT\",\n    name: \"Microsoft Corporation\",\n    type: \"stock\",\n    price: 421.56,\n    change: 8.23,\n    changePercent: 1.99,\n    marketCap: \"3.1T\",\n    volume: \"32.1M\",\n    icon: \"🖥️\"\n  },\n  {\n    id: \"8\",\n    symbol: \"GOOGL\",\n    name: \"Alphabet Inc.\",\n    type: \"stock\",\n    price: 156.78,\n    change: -2.34,\n    changePercent: -1.47,\n    marketCap: \"1.9T\",\n    volume: \"28.7M\",\n    icon: \"🔍\"\n  },\n  {\n    id: \"9\",\n    symbol: \"ADA\",\n    name: \"Cardano\",\n    type: \"crypto\",\n    price: 0.45,\n    change: 0.03,\n    changePercent: 7.14,\n    marketCap: \"15.8B\",\n    volume: \"450M\",\n    icon: \"₳\"\n  },\n  {\n    id: \"10\",\n    symbol: \"SOL\",\n    name: \"Solana\",\n    type: \"crypto\",\n    price: 156.89,\n    change: 12.45,\n    changePercent: 8.62,\n    marketCap: \"73.2B\",\n    volume: \"2.8B\",\n    icon: \"◎\"\n  },\n  {\n    id: \"11\",\n    symbol: \"TIPS\",\n    name: \"Treasury Inflation-Protected Securities\",\n    type: \"bond\",\n    price: 112.34,\n    change: 0.67,\n    changePercent: 0.60,\n    marketCap: \"78.5B\",\n    volume: \"1.2M\",\n    icon: \"📈\"\n  },\n  {\n    id: \"12\",\n    symbol: \"OIL\",\n    name: \"Crude Oil ETF\",\n    type: \"commodity\",\n    price: 78.45,\n    change: -1.23,\n    changePercent: -1.54,\n    marketCap: \"2.3B\",\n    volume: \"5.6M\",\n    icon: \"🛢️\"\n  }\n];\n\nconst getAssetIcon = (type: string) => {\n  switch (type) {\n    case 'stock': return <Building className=\"w-4 h-4\" />;\n    case 'crypto': return <Bitcoin className=\"w-4 h-4\" />;\n    case 'bond': return <Landmark className=\"w-4 h-4\" />;\n    case 'commodity': return <Gem className=\"w-4 h-4\" />;\n    case 'fund': return <Zap className=\"w-4 h-4\" />;\n    default: return <DollarSign className=\"w-4 h-4\" />;\n  }\n};\n\nconst getAssetTypeColor = (type: string) => {\n  switch (type) {\n    case 'stock': return 'bg-blue-500/20 text-blue-400';\n    case 'crypto': return 'bg-orange-500/20 text-orange-400';\n    case 'bond': return 'bg-green-500/20 text-green-400';\n    case 'commodity': return 'bg-yellow-500/20 text-yellow-400';\n    case 'fund': return 'bg-purple-500/20 text-purple-400';\n    default: return 'bg-gray-500/20 text-gray-400';\n  }\n};\n\nconst fadeInUp = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0 },\n  transition: { duration: 0.6 }\n};\n\nexport default function Assets() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedAssetType, setSelectedAssetType] = useState<string>(\"all\");\n\n  const totalPortfolioValue = userAssets.reduce((sum, asset) => sum + (asset.value || 0), 0);\n  const totalChange = userAssets.reduce((sum, asset) => sum + (asset.change * (asset.holdings || 0)), 0);\n  const totalChangePercent = (totalChange / (totalPortfolioValue - totalChange)) * 100;\n\n  const filteredUserAssets = userAssets.filter(asset => {\n    const matchesSearch = asset.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                          asset.symbol.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = selectedAssetType === \"all\" || asset.type === selectedAssetType;\n    return matchesSearch && matchesType;\n  });\n\n  const filteredAvailableAssets = availableAssets.filter(asset => {\n    const matchesSearch = asset.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                          asset.symbol.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = selectedAssetType === \"all\" || asset.type === selectedAssetType;\n    return matchesSearch && matchesType;\n  });\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      {/* Header */}\n      <motion.div className=\"mb-8\" {...fadeInUp}>\n        <div className=\"flex items-center mb-4\">\n          <Wallet className=\"w-8 h-8 mr-3 text-primary\" />\n          <h1 className=\"text-3xl font-bold\">My Assets</h1>\n        </div>\n        <p className=\"text-muted-foreground\">\n          Manage and track your investment portfolio across different asset classes.\n        </p>\n      </motion.div>\n\n      {/* Portfolio Summary */}\n      <motion.div\n        className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\"\n        initial={{ opacity: 0, y: 30 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6, delay: 0.1 }}\n      >\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-sm font-medium text-muted-foreground\">Total Portfolio Value</h3>\n              <Wallet className=\"w-4 h-4 text-primary\" />\n            </div>\n            <div className=\"text-2xl font-bold\" data-testid=\"total-portfolio-value\">\n              ${totalPortfolioValue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n            </div>\n            <div className={`flex items-center mt-2 ${totalChangePercent >= 0 ? 'text-accent' : 'text-destructive'}`}>\n              {totalChangePercent >= 0 ? <TrendingUp className=\"w-4 h-4 mr-1\" /> : <TrendingDown className=\"w-4 h-4 mr-1\" />}\n              <span className=\"text-sm font-medium\">\n                {totalChangePercent >= 0 ? '+' : ''}{totalChangePercent.toFixed(2)}% (${totalChange >= 0 ? '+' : ''}${totalChange.toFixed(2)})\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-sm font-medium text-muted-foreground\">Asset Types</h3>\n              <Building className=\"w-4 h-4 text-primary\" />\n            </div>\n            <div className=\"text-2xl font-bold\" data-testid=\"asset-types-count\">\n              {new Set(userAssets.map(a => a.type)).size}\n            </div>\n            <div className=\"text-sm text-muted-foreground mt-2\">\n              Diversified across different markets\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-sm font-medium text-muted-foreground\">Total Holdings</h3>\n              <Gem className=\"w-4 h-4 text-primary\" />\n            </div>\n            <div className=\"text-2xl font-bold\" data-testid=\"total-holdings\">\n              {userAssets.length}\n            </div>\n            <div className=\"text-sm text-muted-foreground mt-2\">\n              Individual positions\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Search and Filters */}\n      <motion.div\n        className=\"flex flex-col sm:flex-row gap-4 mb-6\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6, delay: 0.2 }}\n      >\n        <div className=\"flex-1\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              placeholder=\"Search assets...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"asset-search\"\n            />\n          </div>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            variant={selectedAssetType === \"all\" ? \"default\" : \"outline\"}\n            onClick={() => setSelectedAssetType(\"all\")}\n            className=\"glass-card\"\n            data-testid=\"filter-all\"\n          >\n            All\n          </Button>\n          <Button\n            variant={selectedAssetType === \"stock\" ? \"default\" : \"outline\"}\n            onClick={() => setSelectedAssetType(\"stock\")}\n            className=\"glass-card\"\n            data-testid=\"filter-stocks\"\n          >\n            Stocks\n          </Button>\n          <Button\n            variant={selectedAssetType === \"crypto\" ? \"default\" : \"outline\"}\n            onClick={() => setSelectedAssetType(\"crypto\")}\n            className=\"glass-card\"\n            data-testid=\"filter-crypto\"\n          >\n            Crypto\n          </Button>\n          <Button\n            variant={selectedAssetType === \"bond\" ? \"default\" : \"outline\"}\n            onClick={() => setSelectedAssetType(\"bond\")}\n            className=\"glass-card\"\n            data-testid=\"filter-bonds\"\n          >\n            Bonds\n          </Button>\n          <Button\n            variant={selectedAssetType === \"commodity\" ? \"default\" : \"outline\"}\n            onClick={() => setSelectedAssetType(\"commodity\")}\n            className=\"glass-card\"\n            data-testid=\"filter-commodities\"\n          >\n            Commodities\n          </Button>\n        </div>\n      </motion.div>\n\n      <Tabs defaultValue=\"portfolio\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"portfolio\" data-testid=\"tab-portfolio\">My Portfolio</TabsTrigger>\n          <TabsTrigger value=\"market\" data-testid=\"tab-market\">Market</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"portfolio\">\n          <motion.div\n            className=\"space-y-4\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.3 }}\n          >\n            {filteredUserAssets.map((asset, index) => (\n              <motion.div\n                key={asset.id}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.05 }}\n              >\n                <Card className=\"glass-card hover:shadow-lg transition-all\" data-testid={`portfolio-asset-${asset.symbol}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-accent rounded-lg flex items-center justify-center text-white font-bold\">\n                          {asset.icon || asset.symbol.slice(0, 2)}\n                        </div>\n                        <div>\n                          <div className=\"flex items-center space-x-2\">\n                            <h3 className=\"font-semibold\">{asset.symbol}</h3>\n                            <Badge className={`text-xs ${getAssetTypeColor(asset.type)}`}>\n                              {asset.type.toUpperCase()}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground\">{asset.name}</p>\n                          <div className=\"flex items-center space-x-4 mt-1\">\n                            <span className=\"text-xs text-muted-foreground\">\n                              Holdings: {asset.holdings}\n                            </span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              Volume: {asset.volume}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-right\">\n                        <div className=\"text-lg font-bold\">\n                          ${asset.price.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                        </div>\n                        <div className={`flex items-center justify-end ${asset.changePercent >= 0 ? 'text-accent' : 'text-destructive'}`}>\n                          {asset.changePercent >= 0 ? <TrendingUp className=\"w-4 h-4 mr-1\" /> : <TrendingDown className=\"w-4 h-4 mr-1\" />}\n                          <span className=\"text-sm font-medium\">\n                            {asset.changePercent >= 0 ? '+' : ''}{asset.changePercent.toFixed(2)}%\n                          </span>\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Value: ${asset.value?.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <Button size=\"sm\" variant=\"outline\" className=\"glass-card\" data-testid={`view-${asset.symbol}`}>\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"glass-card\" data-testid={`more-${asset.symbol}`}>\n                          <MoreHorizontal className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </motion.div>\n        </TabsContent>\n\n        <TabsContent value=\"market\">\n          <motion.div\n            className=\"space-y-4\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.3 }}\n          >\n            {filteredAvailableAssets.map((asset, index) => (\n              <motion.div\n                key={asset.id}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.05 }}\n              >\n                <Card className=\"glass-card hover:shadow-lg transition-all\" data-testid={`market-asset-${asset.symbol}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-accent rounded-lg flex items-center justify-center text-white font-bold\">\n                          {asset.icon || asset.symbol.slice(0, 2)}\n                        </div>\n                        <div>\n                          <div className=\"flex items-center space-x-2\">\n                            <h3 className=\"font-semibold\">{asset.symbol}</h3>\n                            <Badge className={`text-xs ${getAssetTypeColor(asset.type)}`}>\n                              {asset.type.toUpperCase()}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground\">{asset.name}</p>\n                          <div className=\"flex items-center space-x-4 mt-1\">\n                            <span className=\"text-xs text-muted-foreground\">\n                              Market Cap: {asset.marketCap}\n                            </span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              Volume: {asset.volume}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-right\">\n                        <div className=\"text-lg font-bold\">\n                          ${asset.price.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                        </div>\n                        <div className={`flex items-center justify-end ${asset.changePercent >= 0 ? 'text-accent' : 'text-destructive'}`}>\n                          {asset.changePercent >= 0 ? <TrendingUp className=\"w-4 h-4 mr-1\" /> : <TrendingDown className=\"w-4 h-4 mr-1\" />}\n                          <span className=\"text-sm font-medium\">\n                            {asset.changePercent >= 0 ? '+' : ''}{asset.changePercent.toFixed(2)}%\n                          </span>\n                        </div>\n                        <div className={`text-sm ${asset.change >= 0 ? 'text-accent' : 'text-destructive'}`}>\n                          {asset.change >= 0 ? '+' : ''}${asset.change.toFixed(2)}\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <Button size=\"sm\" data-testid={`buy-${asset.symbol}`}>\n                          <Plus className=\"w-4 h-4 mr-1\" />\n                          Buy\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"glass-card\" data-testid={`watch-${asset.symbol}`}>\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </motion.div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":19143},"client/src/pages/buy-bitcoin.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Bitcoin, \n  ExternalLink, \n  Star, \n  Shield, \n  Clock,\n  DollarSign,\n  CreditCard,\n  Smartphone,\n  Building,\n  Users,\n  TrendingUp,\n  CheckCircle\n} from \"lucide-react\";\n\ninterface CryptoPlatform {\n  id: string;\n  name: string;\n  logo: string;\n  rating: number;\n  fees: string;\n  minPurchase: string;\n  paymentMethods: string[];\n  features: string[];\n  verification: string;\n  processingTime: string;\n  description: string;\n  popular: boolean;\n}\n\nconst cryptoPlatforms: CryptoPlatform[] = [\n  {\n    id: \"coinbase\",\n    name: \"Coinbase\",\n    logo: \"🟦\",\n    rating: 4.8,\n    fees: \"0.5-3.99%\",\n    minPurchase: \"$2\",\n    paymentMethods: [\"Credit Card\", \"Debit Card\", \"Bank Transfer\", \"PayPal\"],\n    features: [\"Beginner Friendly\", \"Insurance Protected\", \"Mobile App\", \"Educational Resources\"],\n    verification: \"Required\",\n    processingTime: \"Instant-3 days\",\n    description: \"One of the most popular and user-friendly platforms for buying Bitcoin.\",\n    popular: true\n  },\n  {\n    id: \"binance\",\n    name: \"Binance\",\n    logo: \"🟨\",\n    rating: 4.7,\n    fees: \"0.1-0.5%\",\n    minPurchase: \"$15\",\n    paymentMethods: [\"Credit Card\", \"Debit Card\", \"Bank Transfer\", \"P2P\"],\n    features: [\"Low Fees\", \"High Liquidity\", \"Advanced Trading\", \"Wide Selection\"],\n    verification: \"Required\",\n    processingTime: \"Instant-1 day\",\n    description: \"World's largest cryptocurrency exchange with competitive fees.\",\n    popular: true\n  },\n  {\n    id: \"kraken\",\n    name: \"Kraken\",\n    logo: \"🟪\",\n    rating: 4.6,\n    fees: \"0.16-0.26%\",\n    minPurchase: \"$10\",\n    paymentMethods: [\"Wire Transfer\", \"ACH\", \"Debit Card\"],\n    features: [\"High Security\", \"Pro Trading\", \"Staking\", \"Regulatory Compliant\"],\n    verification: \"Required\",\n    processingTime: \"1-5 days\",\n    description: \"Established exchange known for security and professional trading tools.\",\n    popular: false\n  },\n  {\n    id: \"cashapp\",\n    name: \"Cash App\",\n    logo: \"🟩\",\n    rating: 4.5,\n    fees: \"1.76-2.5%\",\n    minPurchase: \"$1\",\n    paymentMethods: [\"Debit Card\", \"Bank Account\"],\n    features: [\"Simple Interface\", \"Lightning Network\", \"Direct Deposit\", \"Stock Trading\"],\n    verification: \"Minimal\",\n    processingTime: \"Instant\",\n    description: \"Mobile-first platform that makes Bitcoin buying incredibly simple.\",\n    popular: true\n  },\n  {\n    id: \"gemini\",\n    name: \"Gemini\",\n    logo: \"🔷\",\n    rating: 4.4,\n    fees: \"0.35-1.49%\",\n    minPurchase: \"$5\",\n    paymentMethods: [\"Bank Transfer\", \"Wire Transfer\", \"Debit Card\"],\n    features: [\"Regulated\", \"Security First\", \"Earn Program\", \"Active Trader\"],\n    verification: \"Required\",\n    processingTime: \"1-5 days\",\n    description: \"Regulated exchange founded by the Winklevoss twins with strong security.\",\n    popular: false\n  },\n  {\n    id: \"strike\",\n    name: \"Strike\",\n    logo: \"⚡\",\n    rating: 4.3,\n    fees: \"0-1%\",\n    minPurchase: \"$1\",\n    paymentMethods: [\"Bank Account\", \"Debit Card\"],\n    features: [\"Lightning Network\", \"No Trading Fees\", \"Dollar Cost Average\", \"Global Remittance\"],\n    verification: \"Required\",\n    processingTime: \"Instant\",\n    description: \"Lightning-powered Bitcoin app with zero trading fees.\",\n    popular: false\n  }\n];\n\nconst fadeInUp = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0 },\n  transition: { duration: 0.6 }\n};\n\nexport default function BuyBitcoin() {\n  const [selectedPlatform, setSelectedPlatform] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const filteredPlatforms = cryptoPlatforms.filter(platform =>\n    platform.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    platform.description.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const popularPlatforms = filteredPlatforms.filter(p => p.popular);\n  const otherPlatforms = filteredPlatforms.filter(p => !p.popular);\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      {/* Header */}\n      <motion.div className=\"mb-8\" {...fadeInUp}>\n        <div className=\"flex items-center mb-4\">\n          <Bitcoin className=\"w-8 h-8 mr-3 text-orange-500\" />\n          <h1 className=\"text-3xl font-bold\">Buy Bitcoin</h1>\n        </div>\n        <p className=\"text-muted-foreground mb-6\">\n          Choose from trusted platforms to purchase Bitcoin safely and securely.\n        </p>\n        \n        {/* Search and Filter */}\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <Input\n              placeholder=\"Search platforms...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"max-w-md\"\n              data-testid=\"platform-search\"\n            />\n          </div>\n        </div>\n      </motion.div>\n\n      <Tabs defaultValue=\"popular\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"popular\" data-testid=\"tab-popular\">Popular Platforms</TabsTrigger>\n          <TabsTrigger value=\"all\" data-testid=\"tab-all\">All Platforms</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"popular\" className=\"space-y-6\">\n          <motion.div\n            className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.1 }}\n          >\n            {popularPlatforms.map((platform, index) => (\n              <motion.div\n                key={platform.id}\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n              >\n                <Card \n                  className={`glass-card cursor-pointer transition-all hover:shadow-lg ${\n                    selectedPlatform === platform.id ? 'ring-2 ring-primary' : ''\n                  }`}\n                  onClick={() => setSelectedPlatform(platform.id)}\n                  data-testid={`platform-${platform.id}`}\n                >\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"text-2xl\">{platform.logo}</div>\n                        <div>\n                          <CardTitle className=\"text-lg\">{platform.name}</CardTitle>\n                          <div className=\"flex items-center mt-1\">\n                            <Star className=\"w-4 h-4 text-yellow-500 mr-1\" />\n                            <span className=\"text-sm text-muted-foreground\">{platform.rating}</span>\n                          </div>\n                        </div>\n                      </div>\n                      {platform.popular && (\n                        <Badge variant=\"default\" className=\"text-xs\">\n                          Popular\n                        </Badge>\n                      )}\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      {platform.description}\n                    </p>\n                    \n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Fees:</span>\n                        <span className=\"font-medium\">{platform.fees}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Min Purchase:</span>\n                        <span className=\"font-medium\">{platform.minPurchase}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Processing:</span>\n                        <span className=\"font-medium\">{platform.processingTime}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"mt-4\">\n                      <div className=\"text-sm text-muted-foreground mb-2\">Payment Methods:</div>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {platform.paymentMethods.slice(0, 2).map((method) => (\n                          <Badge key={method} variant=\"secondary\" className=\"text-xs\">\n                            {method}\n                          </Badge>\n                        ))}\n                        {platform.paymentMethods.length > 2 && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            +{platform.paymentMethods.length - 2} more\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"mt-4\">\n                      <div className=\"text-sm text-muted-foreground mb-2\">Key Features:</div>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {platform.features.slice(0, 2).map((feature) => (\n                          <Badge key={feature} variant=\"outline\" className=\"text-xs\">\n                            {feature}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    <Button \n                      className=\"w-full mt-4\" \n                      data-testid={`buy-on-${platform.id}`}\n                    >\n                      <ExternalLink className=\"w-4 h-4 mr-2\" />\n                      Buy on {platform.name}\n                    </Button>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </motion.div>\n        </TabsContent>\n\n        <TabsContent value=\"all\" className=\"space-y-6\">\n          <motion.div\n            className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.1 }}\n          >\n            {filteredPlatforms.map((platform, index) => (\n              <motion.div\n                key={platform.id}\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n              >\n                <Card \n                  className={`glass-card cursor-pointer transition-all hover:shadow-lg ${\n                    selectedPlatform === platform.id ? 'ring-2 ring-primary' : ''\n                  }`}\n                  onClick={() => setSelectedPlatform(platform.id)}\n                  data-testid={`platform-${platform.id}`}\n                >\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"text-2xl\">{platform.logo}</div>\n                        <div>\n                          <CardTitle className=\"text-lg\">{platform.name}</CardTitle>\n                          <div className=\"flex items-center mt-1\">\n                            <Star className=\"w-4 h-4 text-yellow-500 mr-1\" />\n                            <span className=\"text-sm text-muted-foreground\">{platform.rating}</span>\n                          </div>\n                        </div>\n                      </div>\n                      {platform.popular && (\n                        <Badge variant=\"default\" className=\"text-xs\">\n                          Popular\n                        </Badge>\n                      )}\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      {platform.description}\n                    </p>\n                    \n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Fees:</span>\n                        <span className=\"font-medium\">{platform.fees}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Min Purchase:</span>\n                        <span className=\"font-medium\">{platform.minPurchase}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Processing:</span>\n                        <span className=\"font-medium\">{platform.processingTime}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"mt-4\">\n                      <div className=\"text-sm text-muted-foreground mb-2\">Payment Methods:</div>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {platform.paymentMethods.slice(0, 2).map((method) => (\n                          <Badge key={method} variant=\"secondary\" className=\"text-xs\">\n                            {method}\n                          </Badge>\n                        ))}\n                        {platform.paymentMethods.length > 2 && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            +{platform.paymentMethods.length - 2} more\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"mt-4\">\n                      <div className=\"text-sm text-muted-foreground mb-2\">Key Features:</div>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {platform.features.slice(0, 2).map((feature) => (\n                          <Badge key={feature} variant=\"outline\" className=\"text-xs\">\n                            {feature}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    <Button \n                      className=\"w-full mt-4\" \n                      data-testid={`buy-on-${platform.id}`}\n                    >\n                      <ExternalLink className=\"w-4 h-4 mr-2\" />\n                      Buy on {platform.name}\n                    </Button>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </motion.div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Bitcoin Price Ticker */}\n      <motion.div\n        className=\"mt-8\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6, delay: 0.3 }}\n      >\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Bitcoin className=\"w-8 h-8 text-orange-500\" />\n                <div>\n                  <h3 className=\"text-lg font-semibold\">Bitcoin Price</h3>\n                  <p className=\"text-sm text-muted-foreground\">Live market price</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-2xl font-bold\" data-testid=\"btc-price\">$67,234.12</div>\n                <div className=\"flex items-center text-accent\">\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  <span className=\"text-sm\">+2.34% (24h)</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Security Notice */}\n      <motion.div\n        className=\"mt-6\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6, delay: 0.4 }}\n      >\n        <Card className=\"glass-card border-amber-500/20\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start space-x-3\">\n              <Shield className=\"w-6 h-6 text-amber-500 mt-1\" />\n              <div>\n                <h3 className=\"font-semibold text-amber-500 mb-2\">Security Notice</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Always verify you're on the official website before entering personal information. \n                  Enable two-factor authentication and use hardware wallets for large amounts. \n                  Never share your private keys or seed phrases with anyone.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":17106},"client/src/pages/dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ChartWidget } from \"@/components/chart-widget\";\nimport { authService } from \"@/lib/auth\";\nimport { \n  SidebarProvider,\n  Sidebar,\n  SidebarContent,\n  SidebarHeader,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuItem,\n  SidebarMenuButton,\n  SidebarTrigger,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel\n} from \"@/components/ui/sidebar\";\nimport { \n  Wallet, \n  TrendingUp, \n  Layers, \n  DollarSign, \n  Bell, \n  Plus,\n  BarChart3,\n  Download,\n  PiggyBank,\n  CreditCard,\n  User,\n  Bot,\n  Zap,\n  Users,\n  Bitcoin,\n  ArrowDownToLine,\n  Home\n} from \"lucide-react\";\n\ninterface DashboardData {\n  user: {\n    id: string;\n    email: string;\n    fullName: string;\n  };\n  portfolio: {\n    totalValue: number;\n    dailyPnL: number;\n    dailyPnLPercent: number;\n    openPositions: number;\n    buyingPower: number;\n  };\n  recentTrades: Array<{\n    id: number;\n    symbol: string;\n    action: string;\n    price: number;\n    pnl: number;\n    timestamp: string;\n  }>;\n  watchlist: Array<{\n    symbol: string;\n    name: string;\n    price: number;\n    change: number;\n  }>;\n  marketOverview: {\n    sp500: { value: number; change: number };\n    nasdaq: { value: number; change: number };\n    dow: { value: number; change: number };\n  };\n}\n\nconst fadeInUp = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0 },\n  transition: { duration: 0.6 }\n};\n\nconst staggerContainer = {\n  animate: {\n    transition: {\n      staggerChildren: 0.1\n    }\n  }\n};\n\n// Navigation data for sidebar\nconst sidebarNavigation = [\n  {\n    title: \"Overview\",\n    items: [\n      {\n        title: \"Dashboard\",\n        icon: Home,\n        url: \"/dashboard\",\n        isActive: true,\n      },\n      {\n        title: \"Assets\",\n        icon: Wallet,\n        url: \"/dashboard/assets\",\n      },\n    ],\n  },\n  {\n    title: \"Trading\",\n    items: [\n      {\n        title: \"Buy Bitcoin\",\n        icon: Bitcoin,\n        url: \"/dashboard/buy-bitcoin\",\n      },\n      {\n        title: \"Deposit Bitcoin\",\n        icon: ArrowDownToLine,\n        url: \"/dashboard/deposit-bitcoin\",\n      },\n      {\n        title: \"Bot\",\n        icon: Bot,\n        url: \"/dashboard/bot\",\n      },\n      {\n        title: \"Signal\",\n        icon: Zap,\n        url: \"/dashboard/signal\",\n      },\n      {\n        title: \"Copy Expert\",\n        icon: Users,\n        url: \"/dashboard/copyexpert\",\n      },\n    ],\n  },\n  {\n    title: \"Wallet\",\n    items: [\n      {\n        title: \"Deposits\",\n        icon: PiggyBank,\n        url: \"/dashboard/deposits\",\n      },\n      {\n        title: \"Withdraw\",\n        icon: CreditCard,\n        url: \"/dashboard/withdraw\",\n      },\n    ],\n  },\n  {\n    title: \"Account\",\n    items: [\n      {\n        title: \"Profile\",\n        icon: User,\n        url: \"/dashboard/profile\",\n      },\n    ],\n  },\n];\n\nexport default function Dashboard() {\n  const [, navigate] = useLocation();\n  const [currentPage, setCurrentPage] = useState(\"dashboard\");\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!authService.isAuthenticated()) {\n      navigate(\"/signin\");\n    }\n  }, [navigate]);\n\n  const { data: dashboardData, isLoading } = useQuery<DashboardData>({\n    queryKey: [\"/api/user/dashboard\"],\n    enabled: authService.isAuthenticated(),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const DashboardContent = () => {\n    if (isLoading) {\n      return (\n        <div className=\"p-6\">\n          <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8\">\n            <div>\n              <Skeleton className=\"h-8 w-64 mb-2\" />\n              <Skeleton className=\"h-4 w-48\" />\n            </div>\n            <div className=\"flex items-center space-x-4 mt-4 lg:mt-0\">\n              <Skeleton className=\"h-10 w-24\" />\n              <Skeleton className=\"h-10 w-32\" />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {[...Array(4)].map((_, i) => (\n              <Card key={i} className=\"glass-card\">\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-4 w-20 mb-4\" />\n                  <Skeleton className=\"h-8 w-32 mb-2\" />\n                  <Skeleton className=\"h-4 w-24\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      );\n    }\n\n    if (!dashboardData) {\n      return (\n        <div className=\"p-6\">\n          <Card className=\"glass-card p-8 text-center\">\n            <CardContent>\n              <p className=\"text-muted-foreground\">Unable to load dashboard data</p>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    const { user, portfolio, recentTrades, watchlist, marketOverview } = dashboardData;\n\n    return (\n      <div className=\"p-6\">\n        {/* Dashboard Header */}\n        <motion.div \n          className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8\"\n          {...fadeInUp}\n        >\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">Trading Dashboard</h1>\n            <p className=\"text-muted-foreground\" data-testid=\"user-welcome\">\n              Welcome back, {user.fullName}\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-4 mt-4 lg:mt-0\">\n            <Button variant=\"outline\" className=\"glass-card\" data-testid=\"button-alerts\">\n              <Bell className=\"w-4 h-4 mr-2\" />\n              Alerts\n            </Button>\n            <Button data-testid=\"button-new-trade\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Trade\n            </Button>\n          </div>\n        </motion.div>\n\n        {/* Stats Overview */}\n        <motion.div \n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\"\n          variants={staggerContainer}\n          initial=\"initial\"\n          animate=\"animate\"\n        >\n          <motion.div variants={fadeInUp}>\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-sm font-medium text-muted-foreground\">Portfolio Value</h3>\n                  <Wallet className=\"w-4 h-4 text-primary\" />\n                </div>\n                <div className=\"text-2xl font-bold\" data-testid=\"portfolio-value\">\n                  ${portfolio.totalValue.toLocaleString()}\n                </div>\n                <div className=\"flex items-center mt-2\">\n                  <TrendingUp className=\"w-4 h-4 text-accent mr-1\" />\n                  <span className=\"text-accent text-sm font-medium\" data-testid=\"portfolio-change\">\n                    +{portfolio.dailyPnLPercent}% (${portfolio.dailyPnL.toLocaleString()})\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          <motion.div variants={fadeInUp}>\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-sm font-medium text-muted-foreground\">Daily P&L</h3>\n                  <TrendingUp className=\"w-4 h-4 text-accent\" />\n                </div>\n                <div className=\"text-2xl font-bold\" data-testid=\"daily-pnl\">\n                  +${portfolio.dailyPnL.toLocaleString()}\n                </div>\n                <div className=\"flex items-center mt-2\">\n                  <TrendingUp className=\"w-4 h-4 text-accent mr-1\" />\n                  <span className=\"text-accent text-sm font-medium\">\n                    +{portfolio.dailyPnLPercent}%\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          <motion.div variants={fadeInUp}>\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-sm font-medium text-muted-foreground\">Open Positions</h3>\n                  <Layers className=\"w-4 h-4 text-primary\" />\n                </div>\n                <div className=\"text-2xl font-bold\" data-testid=\"open-positions\">\n                  {portfolio.openPositions}\n                </div>\n                <div className=\"flex items-center mt-2\">\n                  <span className=\"text-muted-foreground text-sm\">8 Long, 4 Short</span>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          <motion.div variants={fadeInUp}>\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-sm font-medium text-muted-foreground\">Buying Power</h3>\n                  <DollarSign className=\"w-4 h-4 text-accent\" />\n                </div>\n                <div className=\"text-2xl font-bold\" data-testid=\"buying-power\">\n                  ${portfolio.buyingPower.toLocaleString()}\n                </div>\n                <div className=\"flex items-center mt-2\">\n                  <span className=\"text-muted-foreground text-sm\">Available for trading</span>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </motion.div>\n\n        {/* Main Dashboard Grid */}\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          {/* Chart Section */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Main Chart */}\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n            >\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Portfolio Performance</CardTitle>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button size=\"sm\" variant=\"default\" data-testid=\"chart-period-1d\">1D</Button>\n                      <Button size=\"sm\" variant=\"ghost\" data-testid=\"chart-period-1w\">1W</Button>\n                      <Button size=\"sm\" variant=\"ghost\" data-testid=\"chart-period-1m\">1M</Button>\n                      <Button size=\"sm\" variant=\"ghost\" data-testid=\"chart-period-1y\">1Y</Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <ChartWidget height={320} data-testid=\"portfolio-chart\" />\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Recent Trades */}\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.3 }}\n            >\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <CardTitle>Recent Trades</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {recentTrades.map((trade: any, index: number) => (\n                      <div \n                        key={trade.id} \n                        className=\"flex items-center justify-between p-4 bg-muted/20 rounded-lg\"\n                        data-testid={`trade-${index}`}\n                      >\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center\">\n                            <TrendingUp className=\"w-4 h-4 text-primary\" />\n                          </div>\n                          <div>\n                            <div className=\"font-medium\">{trade.symbol}</div>\n                            <div className=\"text-sm text-muted-foreground\">{trade.action}</div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-medium\">${trade.price}</div>\n                          <div className={`text-sm ${trade.pnl > 0 ? 'text-accent' : 'text-destructive'}`}>\n                            {trade.pnl > 0 ? '+' : ''}${trade.pnl}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n\n          {/* Sidebar Widgets */}\n          <div className=\"space-y-6\">\n            {/* Market Overview */}\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.4 }}\n            >\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <CardTitle>Market Overview</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">S&P 500</div>\n                        <div className=\"text-sm text-muted-foreground\">SPX</div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-medium\">{marketOverview.sp500.value}</div>\n                        <div className=\"text-sm text-accent\">+{marketOverview.sp500.change}%</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">NASDAQ</div>\n                        <div className=\"text-sm text-muted-foreground\">IXIC</div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-medium\">{marketOverview.nasdaq.value}</div>\n                        <div className=\"text-sm text-destructive\">{marketOverview.nasdaq.change}%</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium\">DOW</div>\n                        <div className=\"text-sm text-muted-foreground\">DJI</div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-medium\">{marketOverview.dow.value}</div>\n                        <div className=\"text-sm text-accent\">+{marketOverview.dow.change}%</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Watchlist */}\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.5 }}\n            >\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Watchlist</CardTitle>\n                    <Button size=\"icon\" variant=\"ghost\" data-testid=\"button-add-to-watchlist\">\n                      <Plus className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {watchlist.map((stock: any, index: number) => (\n                      <div \n                        key={stock.symbol} \n                        className=\"flex items-center justify-between\"\n                        data-testid={`watchlist-${index}`}\n                      >\n                        <div>\n                          <div className=\"font-medium\">{stock.symbol}</div>\n                          <div className=\"text-sm text-muted-foreground\">{stock.name}</div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-medium\">${stock.price}</div>\n                          <div className={`text-sm ${stock.change > 0 ? 'text-accent' : 'text-destructive'}`}>\n                            {stock.change > 0 ? '+' : ''}{stock.change}%\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Quick Actions */}\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.6 }}\n            >\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <CardTitle>Quick Actions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <Button className=\"w-full justify-start\" data-testid=\"quick-action-place-order\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Place Order\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start glass-card\" data-testid=\"quick-action-market-analysis\" onClick={() => navigate(\"/market-analysis\")}>\n                      <BarChart3 className=\"w-4 h-4 mr-2\" />\n                      Market Analysis\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start glass-card\" data-testid=\"quick-action-export-data\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export Data\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"pt-16\">\n      <SidebarProvider>\n        <Sidebar>\n          <SidebarHeader className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-accent rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"text-white text-sm\" />\n              </div>\n              <span className=\"text-lg font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                TradePro\n              </span>\n            </div>\n          </SidebarHeader>\n          \n          <SidebarContent>\n            {sidebarNavigation.map((group) => (\n              <SidebarGroup key={group.title}>\n                <SidebarGroupLabel>{group.title}</SidebarGroupLabel>\n                <SidebarGroupContent>\n                  <SidebarMenu>\n                    {group.items.map((item) => (\n                      <SidebarMenuItem key={item.title}>\n                        <SidebarMenuButton\n                          isActive={item.isActive}\n                          onClick={() => navigate(item.url)}\n                          data-testid={`sidebar-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                        >\n                          <item.icon className=\"w-4 h-4\" />\n                          <span>{item.title}</span>\n                        </SidebarMenuButton>\n                      </SidebarMenuItem>\n                    ))}\n                  </SidebarMenu>\n                </SidebarGroupContent>\n              </SidebarGroup>\n            ))}\n          </SidebarContent>\n        </Sidebar>\n        \n        <SidebarInset>\n          <header className=\"flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12\">\n            <div className=\"flex items-center gap-2 px-4\">\n              <SidebarTrigger className=\"-ml-1\" />\n            </div>\n          </header>\n          <DashboardContent />\n        </SidebarInset>\n      </SidebarProvider>\n    </div>\n  );\n}","size_bytes":20529},"client/src/pages/home.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { TrendingUp, Bot, Shield, Smartphone, Clock, Users } from \"lucide-react\";\nimport { Testimonials } from \"@/components/testimonials\";\nimport { FooterTop, FooterBottom } from \"@/components/footer\";\n\nconst fadeInUp = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0 },\n  transition: { duration: 0.6 }\n};\n\nconst staggerContainer = {\n  animate: {\n    transition: {\n      staggerChildren: 0.1\n    }\n  }\n};\n\nconst features = [\n  {\n    icon: TrendingUp,\n    title: \"Real-time Analytics\",\n    description: \"Advanced charting tools with real-time market data and technical indicators.\",\n    gradient: \"from-primary to-accent\"\n  },\n  {\n    icon: Bot,\n    title: \"AI-Powered Insights\", \n    description: \"Machine learning algorithms provide intelligent trading recommendations.\",\n    gradient: \"from-accent to-primary\"\n  },\n  {\n    icon: Shield,\n    title: \"Bank-level Security\",\n    description: \"Enterprise-grade security with multi-factor authentication and encryption.\",\n    gradient: \"from-primary to-accent\"\n  },\n  {\n    icon: Smartphone,\n    title: \"Mobile Trading\",\n    description: \"Trade on the go with our responsive mobile-first platform design.\",\n    gradient: \"from-accent to-primary\"\n  },\n  {\n    icon: Clock,\n    title: \"24/7 Support\",\n    description: \"Round-the-clock customer support and market monitoring.\",\n    gradient: \"from-primary to-accent\"\n  },\n  {\n    icon: Users,\n    title: \"Community\",\n    description: \"Connect with traders worldwide and share insights and strategies.\",\n    gradient: \"from-accent to-primary\"\n  }\n];\n\nexport default function Home() {\n  return (\n    <div className=\"pt-16\">\n      {/* Hero Section */}\n      <section className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n        {/* Background gradient with floating elements */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/20 via-transparent to-accent/20\" />\n        <motion.div \n          className=\"absolute top-20 left-20 w-72 h-72 bg-primary/10 rounded-full blur-3xl\"\n          animate={{ y: [0, -10, 0] }}\n          transition={{ duration: 3, repeat: Infinity, ease: \"easeInOut\" }}\n        />\n        <motion.div \n          className=\"absolute bottom-20 right-20 w-96 h-96 bg-accent/10 rounded-full blur-3xl\"\n          animate={{ y: [0, -10, 0] }}\n          transition={{ duration: 3, repeat: Infinity, ease: \"easeInOut\", delay: 1 }}\n        />\n        \n        <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <motion.div {...fadeInUp}>\n            <motion.h1 \n              className=\"text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent\"\n              animate={{ backgroundPosition: [\"0% 50%\", \"100% 50%\", \"0% 50%\"] }}\n              transition={{ duration: 5, repeat: Infinity, ease: \"linear\" }}\n              style={{ backgroundSize: \"200% 200%\" }}\n            >\n              Trade Smarter,<br />Not Harder\n            </motion.h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto leading-relaxed\">\n              Advanced trading platform with real-time analytics, AI-powered insights, and professional-grade tools for modern traders.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <Link href=\"/signup\">\n                <Button \n                  size=\"lg\" \n                  className=\"text-lg px-8 py-4 hover:scale-105 transition-transform duration-200\"\n                  data-testid=\"hero-signup-button\"\n                >\n                  Start Trading Now\n                </Button>\n              </Link>\n              <Link href=\"/about\">\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\" \n                  className=\"text-lg px-8 py-4 glass-card hover:bg-white/5 hover:scale-105 transition-all duration-200\"\n                  data-testid=\"hero-learn-more-button\"\n                >\n                  Learn More\n                </Button>\n              </Link>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"py-24 px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto\">\n        <motion.div \n          className=\"text-center mb-16\"\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n        >\n          <h2 className=\"text-4xl font-bold mb-4\">Why Choose TradePro?</h2>\n          <p className=\"text-xl text-muted-foreground\">Professional trading tools designed for modern investors</p>\n        </motion.div>\n        \n        <motion.div \n          className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\"\n          variants={staggerContainer}\n          initial=\"initial\"\n          whileInView=\"animate\"\n          viewport={{ once: true }}\n        >\n          {features.map((feature, index) => (\n            <motion.div\n              key={feature.title}\n              variants={fadeInUp}\n              whileHover={{ scale: 1.05 }}\n              transition={{ duration: 0.2 }}\n            >\n              <Card className=\"glass-card p-8 h-full hover:shadow-xl hover:shadow-primary/10 transition-all duration-300\">\n                <CardContent className=\"p-0\">\n                  <div className={`w-12 h-12 bg-gradient-to-r ${feature.gradient} rounded-lg flex items-center justify-center mb-6`}>\n                    <feature.icon className=\"text-white text-xl\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-4\">{feature.title}</h3>\n                  <p className=\"text-muted-foreground\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </motion.div>\n      </section>\n      \n      {/* Testimonials Section */}\n      <Testimonials />\n      \n      {/* Footer */}\n      <FooterTop />\n      <FooterBottom />\n    </div>\n  );\n}\n","size_bytes":6234},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { authService } from \"@/lib/auth\";\nimport { \n  User, \n  Mail, \n  Shield, \n  Calendar, \n  Settings,\n  Bell,\n  Smartphone,\n  CreditCard,\n  Eye,\n  Download\n} from \"lucide-react\";\n\ninterface UserProfile {\n  id: string;\n  email: string;\n  fullName: string;\n  accountType: string;\n  memberSince: string;\n  totalTrades: number;\n  successRate: number;\n  verificationStatus: string;\n  twoFactorEnabled: boolean;\n  lastLogin: string;\n}\n\nconst fadeInUp = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0 },\n  transition: { duration: 0.6 }\n};\n\nexport default function Profile() {\n  const { data: userProfile, isLoading } = useQuery<UserProfile>({\n    queryKey: [\"/api/user/profile\"],\n    enabled: authService.isAuthenticated(),\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-8 w-48 mb-6\" />\n                <div className=\"space-y-4\">\n                  {[...Array(4)].map((_, i) => (\n                    <div key={i} className=\"space-y-2\">\n                      <Skeleton className=\"h-4 w-24\" />\n                      <Skeleton className=\"h-6 w-full\" />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          <div className=\"space-y-6\">\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-6 w-32 mb-4\" />\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-4 w-full\" />\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!userProfile) {\n    return (\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <Card className=\"glass-card p-8 text-center\">\n          <CardContent>\n            <p className=\"text-muted-foreground\">Unable to load profile data</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      {/* Profile Header */}\n      <motion.div className=\"mb-8\" {...fadeInUp}>\n        <h1 className=\"text-3xl font-bold mb-2\">My Profile</h1>\n        <p className=\"text-muted-foreground\">Manage your account settings and trading preferences</p>\n      </motion.div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Profile Information */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Personal Information */}\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.1 }}\n          >\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <User className=\"w-5 h-5 mr-2\" />\n                  Personal Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center\">\n                    <User className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-xl font-semibold\" data-testid=\"profile-name\">\n                      {userProfile.fullName}\n                    </h3>\n                    <p className=\"text-muted-foreground\" data-testid=\"profile-email\">\n                      {userProfile.email}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Account Type</label>\n                    <div className=\"mt-1\">\n                      <Badge variant=\"default\" data-testid=\"account-type\">\n                        {userProfile.accountType}\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Member Since</label>\n                    <div className=\"mt-1 flex items-center\">\n                      <Calendar className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                      <span data-testid=\"member-since\">{userProfile.memberSince}</span>\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Verification Status</label>\n                    <div className=\"mt-1\">\n                      <Badge \n                        variant={userProfile.verificationStatus === 'Verified' ? 'default' : 'secondary'}\n                        data-testid=\"verification-status\"\n                      >\n                        <Shield className=\"w-3 h-3 mr-1\" />\n                        {userProfile.verificationStatus}\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Last Login</label>\n                    <div className=\"mt-1\" data-testid=\"last-login\">\n                      {userProfile.lastLogin}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-3\">\n                  <Button data-testid=\"edit-profile-btn\">\n                    <Settings className=\"w-4 h-4 mr-2\" />\n                    Edit Profile\n                  </Button>\n                  <Button variant=\"outline\" className=\"glass-card\" data-testid=\"change-password-btn\">\n                    Change Password\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Trading Statistics */}\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Trading Statistics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-primary\" data-testid=\"total-trades\">\n                      {userProfile.totalTrades}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Total Trades</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-accent\" data-testid=\"success-rate\">\n                      {userProfile.successRate}%\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Success Rate</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Security Settings */}\n          <motion.div\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.6, delay: 0.3 }}\n          >\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Shield className=\"w-5 h-5 mr-2\" />\n                  Security\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Smartphone className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                    <span className=\"text-sm\">Two-Factor Auth</span>\n                  </div>\n                  <Badge variant={userProfile.twoFactorEnabled ? 'default' : 'secondary'} data-testid=\"2fa-status\">\n                    {userProfile.twoFactorEnabled ? 'Enabled' : 'Disabled'}\n                  </Badge>\n                </div>\n\n                <Button size=\"sm\" variant=\"outline\" className=\"w-full glass-card\" data-testid=\"manage-security-btn\">\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Manage Security\n                </Button>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Quick Actions */}\n          <motion.div\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.6, delay: 0.4 }}\n          >\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button size=\"sm\" variant=\"outline\" className=\"w-full glass-card justify-start\" data-testid=\"notification-settings-btn\">\n                  <Bell className=\"w-4 h-4 mr-2\" />\n                  Notification Settings\n                </Button>\n                <Button size=\"sm\" variant=\"outline\" className=\"w-full glass-card justify-start\" data-testid=\"payment-methods-btn\">\n                  <CreditCard className=\"w-4 h-4 mr-2\" />\n                  Payment Methods\n                </Button>\n                <Button size=\"sm\" variant=\"outline\" className=\"w-full glass-card justify-start\" data-testid=\"privacy-settings-btn\">\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  Privacy Settings\n                </Button>\n                <Button size=\"sm\" variant=\"outline\" className=\"w-full glass-card justify-start\" data-testid=\"export-data-btn\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Data\n                </Button>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10705},"client/src/pages/signin.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { LogIn, Eye, EyeOff } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { authService } from \"@/lib/auth\";\nimport { signinSchema } from \"@shared/schema\";\nimport type { SigninUser } from \"@shared/schema\";\n\nexport default function Signin() {\n  const [, navigate] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<SigninUser>({\n    resolver: zodResolver(signinSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const signinMutation = useMutation({\n    mutationFn: async (data: SigninUser) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/signin\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      authService.setToken(data.token);\n      toast({\n        title: \"Welcome back!\",\n        description: \"Successfully signed in to your account\",\n      });\n      navigate(\"/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Sign in failed\",\n        description: error.message || \"Please check your credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SigninUser) => {\n    signinMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"pt-16 min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <motion.div\n        className=\"max-w-md w-full space-y-8\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n      >\n        <div className=\"text-center\">\n          <motion.div\n            className=\"w-16 h-16 bg-gradient-to-r from-primary to-accent rounded-xl mx-auto mb-6 flex items-center justify-center\"\n            whileHover={{ scale: 1.05 }}\n            transition={{ duration: 0.2 }}\n          >\n            <LogIn className=\"text-white text-2xl\" />\n          </motion.div>\n          <h2 className=\"text-3xl font-bold mb-2\">Welcome Back</h2>\n          <p className=\"text-muted-foreground\">Sign in to your trading account</p>\n        </div>\n\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-8\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"Enter your email\"\n                          className=\"bg-input border-border\"\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            {...field}\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter your password\"\n                            className=\"bg-input border-border pr-10\"\n                            data-testid=\"input-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"toggle-password-visibility\"\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox id=\"remember\" data-testid=\"checkbox-remember\" />\n                    <label htmlFor=\"remember\" className=\"text-sm text-muted-foreground\">\n                      Remember me\n                    </label>\n                  </div>\n                  <Button variant=\"link\" className=\"p-0 h-auto text-sm\" data-testid=\"link-forgot-password\">\n                    Forgot password?\n                  </Button>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={signinMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {signinMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t border-border\" />\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"px-2 bg-card text-muted-foreground\">Or continue with</span>\n                </div>\n              </div>\n\n              <div className=\"mt-6 grid grid-cols-2 gap-3\">\n                <Button\n                  variant=\"outline\"\n                  className=\"glass-card hover:bg-white/5\"\n                  data-testid=\"button-google-signin\"\n                >\n                  <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                    <path\n                      fill=\"currentColor\"\n                      d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                    />\n                    <path\n                      fill=\"currentColor\"\n                      d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                    />\n                    <path\n                      fill=\"currentColor\"\n                      d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                    />\n                    <path\n                      fill=\"currentColor\"\n                      d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                    />\n                  </svg>\n                  Google\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"glass-card hover:bg-white/5\"\n                  data-testid=\"button-github-signin\"\n                >\n                  <svg className=\"w-4 h-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z\"\n                      clipRule=\"evenodd\"\n                    />\n                  </svg>\n                  GitHub\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-muted-foreground\">\n                Don't have an account?{\" \"}\n                <Button\n                  variant=\"link\"\n                  className=\"p-0 h-auto font-medium text-primary\"\n                  onClick={() => navigate(\"/signup\")}\n                  data-testid=\"link-signup\"\n                >\n                  Sign up\n                </Button>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":9807},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { UserPlus, Eye, EyeOff } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { authService } from \"@/lib/auth\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport type { InsertUser } from \"@shared/schema\";\n\nconst signupFormSchema = insertUserSchema.extend({\n  confirmPassword: insertUserSchema.shape.password,\n  terms: insertUserSchema.shape.password.optional(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupFormData = InsertUser & {\n  confirmPassword: string;\n  terms?: string;\n};\n\nexport default function Signup() {\n  const [, navigate] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<SignupFormData>({\n    resolver: zodResolver(signupFormSchema),\n    defaultValues: {\n      fullName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: InsertUser) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/signup\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      authService.setToken(data.token);\n      toast({\n        title: \"Account created successfully\",\n        description: \"Welcome to TradePro!\",\n      });\n      navigate(\"/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Signup failed\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SignupFormData) => {\n    const { confirmPassword, terms, ...signupData } = data;\n    signupMutation.mutate(signupData);\n  };\n\n  return (\n    <div className=\"pt-16 min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <motion.div\n        className=\"max-w-md w-full space-y-8\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n      >\n        <div className=\"text-center\">\n          <motion.div\n            className=\"w-16 h-16 bg-gradient-to-r from-primary to-accent rounded-xl mx-auto mb-6 flex items-center justify-center\"\n            whileHover={{ scale: 1.05 }}\n            transition={{ duration: 0.2 }}\n          >\n            <UserPlus className=\"text-white text-2xl\" />\n          </motion.div>\n          <h2 className=\"text-3xl font-bold mb-2\">Create Account</h2>\n          <p className=\"text-muted-foreground\">Join thousands of successful traders</p>\n        </div>\n\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-8\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"fullName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Full Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Enter your full name\"\n                          className=\"bg-input border-border\"\n                          data-testid=\"input-fullname\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"Enter your email\"\n                          className=\"bg-input border-border\"\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            {...field}\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Create a password\"\n                            className=\"bg-input border-border pr-10\"\n                            data-testid=\"input-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"toggle-password-visibility\"\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            {...field}\n                            type={showConfirmPassword ? \"text\" : \"password\"}\n                            placeholder=\"Confirm your password\"\n                            className=\"bg-input border-border pr-10\"\n                            data-testid=\"input-confirm-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                            data-testid=\"toggle-confirm-password-visibility\"\n                          >\n                            {showConfirmPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex items-start space-x-2\">\n                  <Checkbox id=\"terms\" data-testid=\"checkbox-terms\" />\n                  <label htmlFor=\"terms\" className=\"text-sm text-muted-foreground leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                    I agree to the{\" \"}\n                    <a href=\"#\" className=\"text-primary hover:underline\">\n                      Terms of Service\n                    </a>{\" \"}\n                    and{\" \"}\n                    <a href=\"#\" className=\"text-primary hover:underline\">\n                      Privacy Policy\n                    </a>\n                  </label>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={signupMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {signupMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-muted-foreground\">\n                Already have an account?{\" \"}\n                <Button\n                  variant=\"link\"\n                  className=\"p-0 h-auto font-medium text-primary\"\n                  onClick={() => navigate(\"/signin\")}\n                  data-testid=\"link-signin\"\n                >\n                  Sign in\n                </Button>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":9745},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/bot.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { authService } from \"@/lib/auth\";\nimport { \n  Bot, \n  Play, \n  Pause, \n  Settings, \n  TrendingUp, \n  DollarSign,\n  Activity,\n  Target,\n  ArrowLeft\n} from \"lucide-react\";\n\ninterface BotConfig {\n  id: string;\n  name: string;\n  status: 'active' | 'paused' | 'stopped';\n  strategy: string;\n  capital: number;\n  maxRisk: number;\n  profitTarget: number;\n  stopLoss: number;\n  createdAt: string;\n  performance: {\n    totalTrades: number;\n    winRate: number;\n    totalPnL: number;\n    monthlyReturn: number;\n  };\n}\n\nexport default function BotPage() {\n  const [, navigate] = useLocation();\n  const [newBotName, setNewBotName] = useState(\"\");\n  const [newBotStrategy, setNewBotStrategy] = useState(\"\");\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (!authService.isAuthenticated()) {\n      navigate(\"/signin\");\n    }\n  }, [navigate]);\n\n  const { data: bots, isLoading } = useQuery<BotConfig[]>({\n    queryKey: [\"/api/bots\"],\n    enabled: authService.isAuthenticated(),\n  });\n\n  const createBotMutation = useMutation({\n    mutationFn: async (botData: any) => {\n      const token = authService.getToken();\n      const response = await fetch(\"/api/bots\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`,\n        },\n        body: JSON.stringify(botData),\n      });\n      if (!response.ok) throw new Error(\"Failed to create bot\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bots\"] });\n      setNewBotName(\"\");\n      setNewBotStrategy(\"\");\n    },\n  });\n\n  const toggleBotMutation = useMutation({\n    mutationFn: async ({ botId, action }: { botId: string; action: string }) => {\n      const token = authService.getToken();\n      const response = await fetch(`/api/bots/${botId}/${action}`, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error(`Failed to ${action} bot`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bots\"] });\n    },\n  });\n\n  const handleCreateBot = () => {\n    if (!newBotName || !newBotStrategy) return;\n    \n    createBotMutation.mutate({\n      name: newBotName,\n      strategy: newBotStrategy,\n      capital: 10000,\n      maxRisk: 2,\n      profitTarget: 10,\n      stopLoss: 5,\n    });\n  };\n\n  const handleToggleBot = (botId: string, currentStatus: string) => {\n    const action = currentStatus === 'active' ? 'pause' : 'start';\n    toggleBotMutation.mutate({ botId, action });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-64 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate(\"/dashboard\")}\n            className=\"p-2\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n          </Button>\n          <div className=\"flex items-center space-x-3\">\n            <Bot className=\"w-8 h-8 text-primary\" />\n            <h1 className=\"text-3xl font-bold\">Trading Bots</h1>\n          </div>\n        </div>\n      </div>\n\n      {/* Create New Bot */}\n      <Card className=\"glass-card mb-8\">\n        <CardHeader>\n          <CardTitle>Create New Trading Bot</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"bot-name\">Bot Name</Label>\n              <Input\n                id=\"bot-name\"\n                placeholder=\"Enter bot name\"\n                value={newBotName}\n                onChange={(e) => setNewBotName(e.target.value)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"strategy\">Strategy</Label>\n              <Select value={newBotStrategy} onValueChange={setNewBotStrategy}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select strategy\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"momentum\">Momentum Trading</SelectItem>\n                  <SelectItem value=\"meanreversion\">Mean Reversion</SelectItem>\n                  <SelectItem value=\"arbitrage\">Arbitrage</SelectItem>\n                  <SelectItem value=\"scalping\">Scalping</SelectItem>\n                  <SelectItem value=\"grid\">Grid Trading</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-end\">\n              <Button \n                onClick={handleCreateBot}\n                disabled={!newBotName || !newBotStrategy || createBotMutation.isPending}\n                className=\"w-full\"\n              >\n                {createBotMutation.isPending ? \"Creating...\" : \"Create Bot\"}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Bot Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {bots?.map((bot) => (\n          <motion.div\n            key={bot.id}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n          >\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-lg\">{bot.name}</CardTitle>\n                  <Badge \n                    variant={bot.status === 'active' ? 'default' : 'secondary'}\n                    className={bot.status === 'active' ? 'bg-green-500' : ''}\n                  >\n                    {bot.status}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">{bot.strategy}</p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Performance Metrics */}\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Activity className=\"w-4 h-4 text-blue-500\" />\n                      <span>Trades: {bot.performance.totalTrades}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Target className=\"w-4 h-4 text-green-500\" />\n                      <span>Win Rate: {bot.performance.winRate}%</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <DollarSign className=\"w-4 h-4 text-yellow-500\" />\n                      <span>P&L: ${bot.performance.totalPnL}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <TrendingUp className=\"w-4 h-4 text-purple-500\" />\n                      <span>Return: {bot.performance.monthlyReturn}%</span>\n                    </div>\n                  </div>\n\n                  {/* Controls */}\n                  <div className=\"flex items-center justify-between pt-4 border-t\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        checked={bot.status === 'active'}\n                        onCheckedChange={() => handleToggleBot(bot.id, bot.status)}\n                        disabled={toggleBotMutation.isPending}\n                      />\n                      <span className=\"text-sm\">\n                        {bot.status === 'active' ? 'Running' : 'Stopped'}\n                      </span>\n                    </div>\n                    <Button size=\"sm\" variant=\"outline\">\n                      <Settings className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        ))}\n\n        {/* Empty State */}\n        {(!bots || bots.length === 0) && !isLoading && (\n          <Card className=\"glass-card col-span-full\">\n            <CardContent className=\"text-center py-12\">\n              <Bot className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No Trading Bots Yet</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Create your first trading bot to start automated trading\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9645},"client/src/pages/copy-expert.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { authService } from \"@/lib/auth\";\nimport { \n  Users, \n  TrendingUp, \n  Star,\n  DollarSign,\n  Activity,\n  ArrowLeft,\n  Search,\n  UserPlus,\n  Copy\n} from \"lucide-react\";\n\ninterface ExpertTrader {\n  id: string;\n  name: string;\n  username: string;\n  avatar?: string;\n  rating: number;\n  followers: number;\n  following: boolean;\n  performance: {\n    totalReturn: number;\n    monthlyReturn: number;\n    winRate: number;\n    totalTrades: number;\n    riskScore: number;\n  };\n  strategies: string[];\n  description: string;\n  copyFee: number;\n  minCopyAmount: number;\n}\n\nexport default function CopyExpertPage() {\n  const [, navigate] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (!authService.isAuthenticated()) {\n      navigate(\"/signin\");\n    }\n  }, [navigate]);\n\n  const { data: experts, isLoading } = useQuery<ExpertTrader[]>({\n    queryKey: [\"/api/copy-experts\"],\n    enabled: authService.isAuthenticated(),\n  });\n\n  const followMutation = useMutation({\n    mutationFn: async (expertId: string) => {\n      const token = authService.getToken();\n      const response = await fetch(`/api/copy-experts/${expertId}/follow`, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to follow expert\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/copy-experts\"] });\n    },\n  });\n\n  const copyTradeMutation = useMutation({\n    mutationFn: async ({ expertId, amount }: { expertId: string; amount: number }) => {\n      const token = authService.getToken();\n      const response = await fetch(`/api/copy-experts/${expertId}/copy`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`,\n        },\n        body: JSON.stringify({ amount }),\n      });\n      if (!response.ok) throw new Error(\"Failed to start copy trading\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/copy-experts\"] });\n    },\n  });\n\n  const filteredExperts = experts?.filter(expert =>\n    expert.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    expert.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    expert.strategies.some(strategy => strategy.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n\n  const handleFollow = (expertId: string) => {\n    followMutation.mutate(expertId);\n  };\n\n  const handleCopyTrade = (expertId: string) => {\n    // In a real app, this would open a dialog to set copy amount\n    copyTradeMutation.mutate({ expertId, amount: 1000 });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-64 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate(\"/dashboard\")}\n            className=\"p-2\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n          </Button>\n          <div className=\"flex items-center space-x-3\">\n            <Users className=\"w-8 h-8 text-primary\" />\n            <h1 className=\"text-3xl font-bold\">Copy Expert Traders</h1>\n          </div>\n        </div>\n      </div>\n\n      {/* Search */}\n      <Card className=\"glass-card mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              placeholder=\"Search expert traders...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Experts Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {filteredExperts?.map((expert) => (\n          <motion.div\n            key={expert.id}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n          >\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Avatar className=\"h-12 w-12\">\n                      <AvatarImage src={expert.avatar} />\n                      <AvatarFallback>{expert.name.charAt(0)}</AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <h3 className=\"font-bold\">{expert.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">@{expert.username}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n                    <span className=\"font-medium\">{expert.rating}</span>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Performance Metrics */}\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex items-center space-x-2\">\n                      <TrendingUp className=\"w-4 h-4 text-green-500\" />\n                      <span>Return: {expert.performance.totalReturn}%</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Activity className=\"w-4 h-4 text-blue-500\" />\n                      <span>Trades: {expert.performance.totalTrades}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <DollarSign className=\"w-4 h-4 text-yellow-500\" />\n                      <span>Win Rate: {expert.performance.winRate}%</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Users className=\"w-4 h-4 text-purple-500\" />\n                      <span>{expert.followers} followers</span>\n                    </div>\n                  </div>\n\n                  {/* Strategies */}\n                  <div>\n                    <p className=\"text-sm font-medium mb-2\">Strategies:</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {expert.strategies.map((strategy, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                          {strategy}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Description */}\n                  <p className=\"text-sm text-muted-foreground\">{expert.description}</p>\n\n                  {/* Copy Details */}\n                  <div className=\"bg-muted/20 rounded-lg p-3 text-sm\">\n                    <div className=\"flex justify-between items-center mb-1\">\n                      <span>Copy Fee:</span>\n                      <span className=\"font-medium\">{expert.copyFee}%</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Min Amount:</span>\n                      <span className=\"font-medium\">${expert.minCopyAmount}</span>\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex items-center space-x-2 pt-4\">\n                    <Button\n                      variant={expert.following ? \"secondary\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => handleFollow(expert.id)}\n                      disabled={followMutation.isPending}\n                      className=\"flex-1\"\n                    >\n                      <UserPlus className=\"w-4 h-4 mr-2\" />\n                      {expert.following ? \"Following\" : \"Follow\"}\n                    </Button>\n                    <Button\n                      onClick={() => handleCopyTrade(expert.id)}\n                      disabled={copyTradeMutation.isPending}\n                      size=\"sm\"\n                      className=\"flex-1\"\n                    >\n                      <Copy className=\"w-4 h-4 mr-2\" />\n                      Copy Trade\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        ))}\n\n        {/* Empty State */}\n        {(!filteredExperts || filteredExperts.length === 0) && !isLoading && (\n          <Card className=\"glass-card col-span-full\">\n            <CardContent className=\"text-center py-12\">\n              <Users className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No Expert Traders Found</h3>\n              <p className=\"text-muted-foreground\">\n                {searchTerm ? \"No experts match your search criteria\" : \"Check back later for expert traders to follow\"}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10235},"client/src/pages/deposit-bitcoin.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { authService } from \"@/lib/auth\";\nimport { \n  Bitcoin, \n  ArrowDownToLine,\n  Copy,\n  Check,\n  AlertTriangle,\n  ArrowLeft,\n  QrCode,\n  Clock,\n  CheckCircle,\n  XCircle\n} from \"lucide-react\";\n\ninterface DepositHistory {\n  id: string;\n  amount: number;\n  address: string;\n  txHash?: string;\n  status: 'pending' | 'confirmed' | 'failed';\n  confirmations: number;\n  requiredConfirmations: number;\n  createdAt: string;\n  network: string;\n}\n\ninterface WalletData {\n  address: string;\n  balance: number;\n  pendingDeposits: number;\n}\n\nexport default function DepositBitcoinPage() {\n  const [, navigate] = useLocation();\n  const [copiedAddress, setCopiedAddress] = useState(false);\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (!authService.isAuthenticated()) {\n      navigate(\"/signin\");\n    }\n  }, [navigate]);\n\n  const { data: walletData, isLoading: walletLoading } = useQuery<WalletData>({\n    queryKey: [\"/api/wallet/bitcoin\"],\n    enabled: authService.isAuthenticated(),\n  });\n\n  const { data: depositHistory, isLoading: historyLoading } = useQuery<DepositHistory[]>({\n    queryKey: [\"/api/wallet/bitcoin/deposits\"],\n    enabled: authService.isAuthenticated(),\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const copyAddress = async () => {\n    if (walletData?.address) {\n      await navigator.clipboard.writeText(walletData.address);\n      setCopiedAddress(true);\n      setTimeout(() => setCopiedAddress(false), 2000);\n    }\n  };\n\n  const refreshDeposits = () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/wallet/bitcoin/deposits\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/wallet/bitcoin\"] });\n  };\n\n  if (walletLoading || historyLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n          <div className=\"h-48 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate(\"/dashboard\")}\n            className=\"p-2\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n          </Button>\n          <div className=\"flex items-center space-x-3\">\n            <Bitcoin className=\"w-8 h-8 text-orange-500\" />\n            <h1 className=\"text-3xl font-bold\">Deposit Bitcoin</h1>\n          </div>\n        </div>\n        <Button onClick={refreshDeposits} variant=\"outline\">\n          Refresh\n        </Button>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Left Column - Deposit Info */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Wallet Overview */}\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Bitcoin className=\"w-5 h-5 text-orange-500\" />\n                <span>Bitcoin Wallet</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"text-center p-4 bg-muted/20 rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">Available Balance</p>\n                  <p className=\"text-2xl font-bold\">{walletData?.balance || 0} BTC</p>\n                </div>\n                <div className=\"text-center p-4 bg-muted/20 rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">Pending Deposits</p>\n                  <p className=\"text-2xl font-bold text-yellow-500\">{walletData?.pendingDeposits || 0} BTC</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Deposit Address */}\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle>Your Deposit Address</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <Alert>\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Only send Bitcoin (BTC) to this address. Sending any other cryptocurrency will result in permanent loss.\n                  </AlertDescription>\n                </Alert>\n                \n                <div>\n                  <Label>Bitcoin Address (BTC Network)</Label>\n                  <div className=\"flex items-center space-x-2 mt-2\">\n                    <Input\n                      value={walletData?.address || \"Loading...\"}\n                      readOnly\n                      className=\"font-mono text-sm\"\n                    />\n                    <Button\n                      onClick={copyAddress}\n                      size=\"icon\"\n                      variant=\"outline\"\n                      disabled={!walletData?.address}\n                    >\n                      {copiedAddress ? (\n                        <Check className=\"w-4 h-4 text-green-500\" />\n                      ) : (\n                        <Copy className=\"w-4 h-4\" />\n                      )}\n                    </Button>\n                  </div>\n                  {copiedAddress && (\n                    <p className=\"text-sm text-green-500 mt-1\">Address copied to clipboard!</p>\n                  )}\n                </div>\n\n                <div className=\"bg-muted/20 rounded-lg p-4 text-sm\">\n                  <h4 className=\"font-semibold mb-2\">Important Information:</h4>\n                  <ul className=\"space-y-1 text-muted-foreground\">\n                    <li>• Minimum deposit: 0.0001 BTC</li>\n                    <li>• Network: Bitcoin (BTC)</li>\n                    <li>• Confirmations required: 3</li>\n                    <li>• Estimated arrival: 30-60 minutes</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Enhanced QR Code and Instructions */}\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <QrCode className=\"w-5 h-5\" />\n                <span>QR Code & Instructions</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"text-center\">\n                  <div className=\"w-48 h-48 bg-gradient-to-br from-orange-100 to-yellow-100 dark:from-orange-900/20 dark:to-yellow-900/20 rounded-lg flex items-center justify-center mx-auto mb-4 border border-orange-200 dark:border-orange-800\">\n                    <QrCode className=\"w-24 h-24 text-orange-600\" />\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Scan this QR code with your Bitcoin wallet to deposit\n                  </p>\n                  <Button variant=\"outline\" size=\"sm\" className=\"text-xs\">\n                    Generate New QR Code\n                  </Button>\n                </div>\n                \n                {/* Step-by-step Instructions */}\n                <div className=\"bg-muted/20 rounded-lg p-4\">\n                  <h4 className=\"font-semibold mb-3 flex items-center\">\n                    <Bitcoin className=\"w-4 h-4 mr-2 text-orange-500\" />\n                    How to Deposit Bitcoin\n                  </h4>\n                  <ol className=\"space-y-2 text-sm text-muted-foreground\">\n                    <li className=\"flex items-start\">\n                      <span className=\"bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center text-xs mr-3 mt-0.5\">1</span>\n                      <span>Open your Bitcoin wallet app</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <span className=\"bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center text-xs mr-3 mt-0.5\">2</span>\n                      <span>Scan the QR code or copy the address above</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <span className=\"bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center text-xs mr-3 mt-0.5\">3</span>\n                      <span>Enter the amount you want to deposit</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <span className=\"bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center text-xs mr-3 mt-0.5\">4</span>\n                      <span>Confirm and send the transaction</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <span className=\"bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center text-xs mr-3 mt-0.5\">5</span>\n                      <span>Wait for 3 confirmations (usually 30-60 minutes)</span>\n                    </li>\n                  </ol>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Right Column - Enhanced Deposit History & Stats */}\n        <div className=\"space-y-6\">\n          {/* Quick Stats */}\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle>Deposit Statistics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 gap-4\">\n                <div className=\"text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                  <p className=\"text-2xl font-bold text-green-600\">0.02443</p>\n                  <p className=\"text-sm text-muted-foreground\">Total Deposited (BTC)</p>\n                </div>\n                <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n                  <p className=\"text-2xl font-bold text-blue-600\">3</p>\n                  <p className=\"text-sm text-muted-foreground\">Successful Deposits</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Enhanced Deposit History */}\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Recent Deposits</CardTitle>\n                <Button variant=\"outline\" size=\"sm\" onClick={refreshDeposits}>\n                  Refresh\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {depositHistory?.length ? (\n                  depositHistory.map((deposit) => (\n                    <motion.div\n                      key={deposit.id}\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      className=\"border rounded-lg p-4 space-y-3 bg-gradient-to-r from-white to-gray-50 dark:from-gray-900 dark:to-gray-800\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 rounded-full bg-orange-100 dark:bg-orange-900/20 flex items-center justify-center\">\n                            <Bitcoin className=\"w-5 h-5 text-orange-600\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium\">{deposit.amount} BTC</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              ${(deposit.amount * 43250).toFixed(2)} USD\n                            </p>\n                          </div>\n                        </div>\n                        <Badge\n                          variant={\n                            deposit.status === 'confirmed' ? 'default' :\n                            deposit.status === 'pending' ? 'secondary' :\n                            'destructive'\n                          }\n                          className=\"flex items-center space-x-1\"\n                        >\n                          {deposit.status === 'confirmed' && <CheckCircle className=\"w-3 h-3\" />}\n                          {deposit.status === 'pending' && <Clock className=\"w-3 h-3\" />}\n                          {deposit.status === 'failed' && <XCircle className=\"w-3 h-3\" />}\n                          <span>{deposit.status}</span>\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 gap-2 text-xs text-muted-foreground bg-muted/20 rounded p-3\">\n                        <div className=\"flex justify-between\">\n                          <span>Network:</span>\n                          <span className=\"font-medium\">{deposit.network}</span>\n                        </div>\n                        {deposit.status === 'pending' && (\n                          <div className=\"flex justify-between\">\n                            <span>Confirmations:</span>\n                            <span className=\"font-medium text-yellow-600\">\n                              {deposit.confirmations}/{deposit.requiredConfirmations}\n                            </span>\n                          </div>\n                        )}\n                        {deposit.txHash && (\n                          <div className=\"flex justify-between\">\n                            <span>Transaction:</span>\n                            <span className=\"font-mono text-xs\">\n                              {deposit.txHash.slice(0, 16)}...\n                            </span>\n                          </div>\n                        )}\n                        <div className=\"flex justify-between\">\n                          <span>Time:</span>\n                          <span>{new Date(deposit.createdAt).toLocaleString()}</span>\n                        </div>\n                      </div>\n                    </motion.div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <div className=\"w-16 h-16 rounded-full bg-orange-100 dark:bg-orange-900/20 flex items-center justify-center mx-auto mb-4\">\n                      <ArrowDownToLine className=\"w-8 h-8 text-orange-600\" />\n                    </div>\n                    <h3 className=\"font-medium mb-2\">No deposits yet</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Your Bitcoin deposits will appear here\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\">\n                      Learn How to Deposit\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15729},"client/src/pages/signal.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { authService } from \"@/lib/auth\";\nimport { \n  Zap, \n  TrendingUp, \n  TrendingDown,\n  Clock,\n  Target,\n  ArrowLeft,\n  Search,\n  Filter\n} from \"lucide-react\";\n\ninterface TradingSignal {\n  id: string;\n  symbol: string;\n  action: 'BUY' | 'SELL' | 'HOLD';\n  price: number;\n  targetPrice: number;\n  stopLoss: number;\n  confidence: number;\n  timeframe: string;\n  strategy: string;\n  createdAt: string;\n  status: 'active' | 'executed' | 'expired';\n  pnl?: number;\n}\n\nexport default function SignalPage() {\n  const [, navigate] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    if (!authService.isAuthenticated()) {\n      navigate(\"/signin\");\n    }\n  }, [navigate]);\n\n  const { data: signals, isLoading } = useQuery<TradingSignal[]>({\n    queryKey: [\"/api/signals\"],\n    enabled: authService.isAuthenticated(),\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const filteredSignals = signals?.filter(signal =>\n    signal.symbol.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    signal.strategy.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const executeSignal = async (signalId: string) => {\n    const token = authService.getToken();\n    try {\n      const response = await fetch(`/api/signals/${signalId}/execute`, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n        },\n      });\n      if (response.ok) {\n        // Refresh signals\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error(\"Failed to execute signal:\", error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate(\"/dashboard\")}\n            className=\"p-2\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n          </Button>\n          <div className=\"flex items-center space-x-3\">\n            <Zap className=\"w-8 h-8 text-primary\" />\n            <h1 className=\"text-3xl font-bold\">Trading Signals</h1>\n          </div>\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      <Card className=\"glass-card mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder=\"Search symbols or strategies...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Button variant=\"outline\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filter\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Signals List */}\n      <div className=\"space-y-4\">\n        {filteredSignals?.map((signal) => (\n          <motion.div\n            key={signal.id}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n          >\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n                        {signal.action === 'BUY' ? (\n                          <TrendingUp className=\"w-6 h-6 text-green-500\" />\n                        ) : signal.action === 'SELL' ? (\n                          <TrendingDown className=\"w-6 h-6 text-red-500\" />\n                        ) : (\n                          <Clock className=\"w-6 h-6 text-yellow-500\" />\n                        )}\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-bold\">{signal.symbol}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{signal.strategy}</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-6\">\n                    <div className=\"text-center\">\n                      <Badge \n                        variant={\n                          signal.action === 'BUY' ? 'default' : \n                          signal.action === 'SELL' ? 'destructive' : \n                          'secondary'\n                        }\n                        className=\"mb-2\"\n                      >\n                        {signal.action}\n                      </Badge>\n                      <p className=\"text-sm text-muted-foreground\">Action</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-lg font-bold\">${signal.price}</p>\n                      <p className=\"text-sm text-muted-foreground\">Entry Price</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-lg font-bold text-green-500\">${signal.targetPrice}</p>\n                      <p className=\"text-sm text-muted-foreground\">Target</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-lg font-bold text-red-500\">${signal.stopLoss}</p>\n                      <p className=\"text-sm text-muted-foreground\">Stop Loss</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-lg font-bold\">{signal.confidence}%</p>\n                      <p className=\"text-sm text-muted-foreground\">Confidence</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <Badge variant={\n                        signal.status === 'active' ? 'default' :\n                        signal.status === 'executed' ? 'secondary' :\n                        'outline'\n                      }>\n                        {signal.status}\n                      </Badge>\n                    </div>\n\n                    {signal.status === 'active' && (\n                      <Button \n                        onClick={() => executeSignal(signal.id)}\n                        size=\"sm\"\n                      >\n                        Execute\n                      </Button>\n                    )}\n\n                    {signal.status === 'executed' && signal.pnl && (\n                      <div className=\"text-center\">\n                        <p className={`text-lg font-bold ${signal.pnl > 0 ? 'text-green-500' : 'text-red-500'}`}>\n                          {signal.pnl > 0 ? '+' : ''}${signal.pnl}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">P&L</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"mt-4 flex items-center space-x-4 text-sm text-muted-foreground\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Clock className=\"w-4 h-4\" />\n                    <span>{signal.timeframe}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Target className=\"w-4 h-4\" />\n                    <span>Strategy: {signal.strategy}</span>\n                  </div>\n                  <span>Generated: {new Date(signal.createdAt).toLocaleString()}</span>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        ))}\n\n        {/* Empty State */}\n        {(!filteredSignals || filteredSignals.length === 0) && !isLoading && (\n          <Card className=\"glass-card\">\n            <CardContent className=\"text-center py-12\">\n              <Zap className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No Trading Signals</h3>\n              <p className=\"text-muted-foreground\">\n                {searchTerm ? \"No signals match your search criteria\" : \"No active trading signals available\"}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9259},"client/src/pages/withdraw.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { authService } from \"@/lib/auth\";\nimport { \n  CreditCard, \n  ArrowLeft,\n  Send,\n  AlertTriangle,\n  Clock,\n  CheckCircle,\n  XCircle,\n  Bitcoin,\n  DollarSign\n} from \"lucide-react\";\n\ninterface WithdrawHistory {\n  id: string;\n  amount: number;\n  currency: string;\n  address: string;\n  fee: number;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  createdAt: string;\n  txHash?: string;\n}\n\ninterface WalletBalance {\n  btc: number;\n  usd: number;\n}\n\nexport default function WithdrawPage() {\n  const [, navigate] = useLocation();\n  const [withdrawAmount, setWithdrawAmount] = useState(\"\");\n  const [withdrawAddress, setWithdrawAddress] = useState(\"\");\n  const [withdrawCurrency, setWithdrawCurrency] = useState(\"btc\");\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (!authService.isAuthenticated()) {\n      navigate(\"/signin\");\n    }\n  }, [navigate]);\n\n  const { data: balance, isLoading: balanceLoading } = useQuery<WalletBalance>({\n    queryKey: [\"/api/wallet/balance\"],\n    enabled: authService.isAuthenticated(),\n  });\n\n  const { data: withdrawHistory, isLoading: historyLoading } = useQuery<WithdrawHistory[]>({\n    queryKey: [\"/api/wallet/withdrawals\"],\n    enabled: authService.isAuthenticated(),\n    refetchInterval: 30000,\n  });\n\n  const withdrawMutation = useMutation({\n    mutationFn: async (withdrawData: any) => {\n      const token = authService.getToken();\n      const response = await fetch(\"/api/wallet/withdraw\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`,\n        },\n        body: JSON.stringify(withdrawData),\n      });\n      \n      const result = await response.json();\n      if (!response.ok) throw new Error(result.message || \"Withdrawal failed\");\n      return result;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet/withdrawals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet/balance\"] });\n      setWithdrawAmount(\"\");\n      setWithdrawAddress(\"\");\n      setErrors({});\n    },\n    onError: (error: any) => {\n      setErrors({ general: error.message });\n    },\n  });\n\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {};\n    \n    if (!withdrawAmount || isNaN(parseFloat(withdrawAmount)) || parseFloat(withdrawAmount) <= 0) {\n      newErrors.amount = \"Please enter a valid amount greater than 0\";\n    }\n    \n    if (!withdrawAddress.trim()) {\n      newErrors.address = \"Please enter a withdrawal address\";\n    }\n    \n    const amount = parseFloat(withdrawAmount);\n    const availableBalance = withdrawCurrency === 'btc' ? balance?.btc || 0 : balance?.usd || 0;\n    const fee = withdrawCurrency === 'btc' ? 0.0005 : 5;\n    \n    // Minimum withdrawal limits\n    if (withdrawCurrency === 'btc' && amount < 0.001) {\n      newErrors.amount = \"Minimum withdrawal: 0.001 BTC\";\n    } else if (withdrawCurrency === 'usd' && amount < 10) {\n      newErrors.amount = \"Minimum withdrawal: $10\";\n    }\n    \n    // Check if amount covers the fee\n    if (amount <= fee) {\n      newErrors.amount = `Amount must be greater than network fee of ${withdrawCurrency === 'btc' ? '0.0005 BTC' : '$5'}`;\n    }\n    \n    if (amount > availableBalance) {\n      newErrors.amount = `Insufficient balance. Available: ${availableBalance} ${withdrawCurrency.toUpperCase()}`;\n    }\n    \n    // Enhanced address validation\n    if (withdrawCurrency === 'btc' && withdrawAddress.trim()) {\n      // Basic Bitcoin address validation\n      if (!withdrawAddress.match(/^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,62}$/)) {\n        newErrors.address = \"Invalid Bitcoin address format. Please enter a valid Bitcoin address.\";\n      }\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleWithdraw = () => {\n    if (!validateForm()) return;\n    \n    withdrawMutation.mutate({\n      amount: parseFloat(withdrawAmount),\n      currency: withdrawCurrency,\n      address: withdrawAddress,\n    });\n  };\n\n  const getWithdrawFee = () => {\n    if (withdrawCurrency === 'btc') {\n      return { amount: 0.0005, display: \"0.0005 BTC\" };\n    } else {\n      return { amount: 5, display: \"$5\" };\n    }\n  };\n\n  const fee = getWithdrawFee();\n  const netAmount = withdrawAmount ? parseFloat(withdrawAmount) - fee.amount : 0;\n\n  if (balanceLoading || historyLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n          <div className=\"h-48 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate(\"/dashboard\")}\n            className=\"p-2\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n          </Button>\n          <div className=\"flex items-center space-x-3\">\n            <CreditCard className=\"w-8 h-8 text-primary\" />\n            <h1 className=\"text-3xl font-bold\">Withdraw Funds</h1>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Left Column - Withdraw Form */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Balance Overview */}\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle>Available Balance</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"text-center p-4 bg-muted/20 rounded-lg\">\n                  <div className=\"flex items-center justify-center space-x-2 mb-2\">\n                    <Bitcoin className=\"w-5 h-5 text-orange-500\" />\n                    <span className=\"font-medium\">Bitcoin</span>\n                  </div>\n                  <p className=\"text-2xl font-bold\">{balance?.btc || 0} BTC</p>\n                </div>\n                <div className=\"text-center p-4 bg-muted/20 rounded-lg\">\n                  <div className=\"flex items-center justify-center space-x-2 mb-2\">\n                    <DollarSign className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"font-medium\">USD</span>\n                  </div>\n                  <p className=\"text-2xl font-bold\">${balance?.usd || 0}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Withdraw Form */}\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle>Create Withdrawal</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {errors.general && (\n                  <Alert variant=\"destructive\">\n                    <AlertTriangle className=\"h-4 w-4\" />\n                    <AlertDescription>{errors.general}</AlertDescription>\n                  </Alert>\n                )}\n\n                <div>\n                  <Label htmlFor=\"currency\">Currency</Label>\n                  <Select value={withdrawCurrency} onValueChange={setWithdrawCurrency}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"btc\">Bitcoin (BTC)</SelectItem>\n                      <SelectItem value=\"usd\">US Dollar (USD)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"amount\">Amount</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"amount\"\n                      type=\"number\"\n                      step={withdrawCurrency === 'btc' ? '0.00000001' : '0.01'}\n                      min={withdrawCurrency === 'btc' ? '0.001' : '10'}\n                      max={withdrawCurrency === 'btc' ? balance?.btc || 0 : balance?.usd || 0}\n                      placeholder={`Enter amount in ${withdrawCurrency.toUpperCase()}`}\n                      value={withdrawAmount}\n                      onChange={(e) => {\n                        setWithdrawAmount(e.target.value);\n                        // Clear errors when user starts typing\n                        if (errors.amount) {\n                          setErrors({ ...errors, amount: '' });\n                        }\n                      }}\n                      className={errors.amount ? \"border-red-500\" : \"\"}\n                    />\n                    <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-sm text-muted-foreground\">\n                      {withdrawCurrency.toUpperCase()}\n                    </div>\n                  </div>\n                  {errors.amount && <p className=\"text-red-500 text-sm mt-1\">{errors.amount}</p>}\n                  <div className=\"flex justify-between text-sm text-muted-foreground mt-1\">\n                    <span>\n                      Available: {withdrawCurrency === 'btc' ? `${balance?.btc || 0} BTC` : `$${(balance?.usd || 0).toLocaleString()}`}\n                    </span>\n                    <span>\n                      Min: {withdrawCurrency === 'btc' ? '0.001 BTC' : '$10'} | Fee: {withdrawCurrency === 'btc' ? '0.0005 BTC' : '$5'}\n                    </span>\n                  </div>\n                  {/* Quick amount buttons */}\n                  <div className=\"flex space-x-2 mt-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const maxAmount = withdrawCurrency === 'btc' ? balance?.btc || 0 : balance?.usd || 0;\n                        const fee = withdrawCurrency === 'btc' ? 0.0005 : 5;\n                        const netMax = Math.max(0, maxAmount - fee);\n                        setWithdrawAmount(netMax.toString());\n                      }}\n                    >\n                      Max\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const halfAmount = withdrawCurrency === 'btc' \n                          ? ((balance?.btc || 0) / 2).toFixed(8)\n                          : ((balance?.usd || 0) / 2).toFixed(2);\n                        setWithdrawAmount(halfAmount);\n                      }}\n                    >\n                      50%\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const quarterAmount = withdrawCurrency === 'btc' \n                          ? ((balance?.btc || 0) / 4).toFixed(8)\n                          : ((balance?.usd || 0) / 4).toFixed(2);\n                        setWithdrawAmount(quarterAmount);\n                      }}\n                    >\n                      25%\n                    </Button>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"address\">\n                    {withdrawCurrency === 'btc' ? 'Bitcoin Address' : 'Bank Account / Wallet Address'}\n                  </Label>\n                  <div className=\"space-y-2\">\n                    <Input\n                      id=\"address\"\n                      placeholder={\n                        withdrawCurrency === 'btc' \n                          ? 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh' \n                          : 'Enter bank account or wallet address'\n                      }\n                      value={withdrawAddress}\n                      onChange={(e) => {\n                        setWithdrawAddress(e.target.value);\n                        // Clear errors when user starts typing\n                        if (errors.address) {\n                          setErrors({ ...errors, address: '' });\n                        }\n                      }}\n                      className={`font-mono text-sm ${errors.address ? \"border-red-500\" : \"\"}`}\n                    />\n                    {withdrawCurrency === 'btc' && (\n                      <p className=\"text-xs text-muted-foreground\">\n                        Supported formats: Legacy (1...), P2SH (3...), Bech32 (bc1...)\n                      </p>\n                    )}\n                  </div>\n                  {errors.address && <p className=\"text-red-500 text-sm mt-1\">{errors.address}</p>}\n                </div>\n\n                {/* Enhanced Fee Summary */}\n                {withdrawAmount && !isNaN(parseFloat(withdrawAmount)) && (\n                  <motion.div \n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-lg p-4 border border-blue-200 dark:border-blue-800 space-y-3\"\n                  >\n                    <h4 className=\"font-semibold flex items-center\">\n                      <DollarSign className=\"w-4 h-4 mr-2 text-blue-500\" />\n                      Transaction Summary\n                    </h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Withdrawal Amount:</span>\n                        <span className=\"font-medium\">{parseFloat(withdrawAmount).toFixed(withdrawCurrency === 'btc' ? 8 : 2)} {withdrawCurrency.toUpperCase()}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Network Fee:</span>\n                        <span className=\"text-orange-600 font-medium\">{fee.display}</span>\n                      </div>\n                      <div className=\"flex justify-between items-center font-medium border-t pt-2 text-base\">\n                        <span>You'll Receive:</span>\n                        <span className={`${netAmount < 0 ? 'text-red-500' : 'text-green-600'} font-bold`}>\n                          {Math.max(0, netAmount).toFixed(withdrawCurrency === 'btc' ? 8 : 2)} {withdrawCurrency.toUpperCase()}\n                        </span>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground pt-1\">\n                        Estimated arrival: {withdrawCurrency === 'btc' ? '30-60 minutes' : '1-3 business days'}\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n\n                <Alert>\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    {withdrawCurrency === 'btc' \n                      ? \"Double-check your Bitcoin address. Transactions cannot be reversed.\"\n                      : \"Ensure your bank account details are correct. Processing may take 1-3 business days.\"\n                    }\n                  </AlertDescription>\n                </Alert>\n\n                <Button\n                  onClick={handleWithdraw}\n                  disabled={withdrawMutation.isPending || !withdrawAmount || !withdrawAddress || Object.values(errors).some(error => error)}\n                  className=\"w-full\"\n                  size=\"lg\"\n                >\n                  <Send className=\"w-4 h-4 mr-2\" />\n                  {withdrawMutation.isPending ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Processing Withdrawal...\n                    </>\n                  ) : (\n                    `Withdraw ${withdrawAmount ? `${parseFloat(withdrawAmount).toFixed(withdrawCurrency === 'btc' ? 4 : 2)} ${withdrawCurrency.toUpperCase()}` : 'Funds'}`\n                  )}\n                </Button>\n                \n                {/* Success Message */}\n                {withdrawMutation.isSuccess && (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.9 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4 flex items-center space-x-3\"\n                  >\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <div>\n                      <p className=\"font-medium text-green-800 dark:text-green-200\">\n                        Withdrawal Request Submitted Successfully!\n                      </p>\n                      <p className=\"text-sm text-green-600 dark:text-green-300\">\n                        Your withdrawal is being processed and will arrive in {withdrawCurrency === 'btc' ? '30-60 minutes' : '1-3 business days'}.\n                      </p>\n                    </div>\n                  </motion.div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Right Column - Withdrawal History */}\n        <div className=\"space-y-6\">\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle>Recent Withdrawals</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {withdrawHistory?.length ? (\n                  withdrawHistory.map((withdrawal) => (\n                    <motion.div\n                      key={withdrawal.id}\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      className=\"border rounded-lg p-4 space-y-2\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">\n                          {withdrawal.amount} {withdrawal.currency.toUpperCase()}\n                        </span>\n                        <Badge\n                          variant={\n                            withdrawal.status === 'completed' ? 'default' :\n                            withdrawal.status === 'processing' || withdrawal.status === 'pending' ? 'secondary' :\n                            'destructive'\n                          }\n                        >\n                          {withdrawal.status === 'completed' && <CheckCircle className=\"w-3 h-3 mr-1\" />}\n                          {(withdrawal.status === 'processing' || withdrawal.status === 'pending') && <Clock className=\"w-3 h-3 mr-1\" />}\n                          {withdrawal.status === 'failed' && <XCircle className=\"w-3 h-3 mr-1\" />}\n                          {withdrawal.status}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"text-sm text-muted-foreground space-y-1\">\n                        <p>Fee: {withdrawal.fee} {withdrawal.currency.toUpperCase()}</p>\n                        <p className=\"truncate\">To: {withdrawal.address.slice(0, 20)}...</p>\n                        {withdrawal.txHash && (\n                          <p className=\"truncate\">\n                            Tx: {withdrawal.txHash.slice(0, 16)}...\n                          </p>\n                        )}\n                        <p>{new Date(withdrawal.createdAt).toLocaleString()}</p>\n                      </div>\n                    </motion.div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Send className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                    <p className=\"text-muted-foreground\">No withdrawals yet</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20835},"client/src/components/footer.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  TrendingUp, \n  Mail, \n  Phone, \n  MapPin, \n  Twitter, \n  Facebook, \n  Linkedin, \n  Instagram,\n  Bitcoin,\n  Shield,\n  Zap,\n  Users,\n  BarChart3,\n  Bot\n} from \"lucide-react\";\n\nconst fadeInUp = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0 },\n  transition: { duration: 0.6 }\n};\n\nconst staggerContainer = {\n  animate: {\n    transition: {\n      staggerChildren: 0.1\n    }\n  }\n};\n\nexport function FooterTop() {\n  return (\n    <section className=\"py-20 bg-gradient-to-b from-muted/10 to-muted/30\">\n      <div className=\"container mx-auto px-6\">\n        <motion.div\n          className=\"grid lg:grid-cols-4 md:grid-cols-2 gap-12\"\n          variants={staggerContainer}\n          initial=\"initial\"\n          whileInView=\"animate\"\n          viewport={{ once: true }}\n        >\n          {/* Company Info */}\n          <motion.div variants={fadeInUp} className=\"lg:col-span-1\">\n            <div className=\"flex items-center space-x-2 mb-6\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-primary to-accent rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"text-white text-lg\" />\n              </div>\n              <span className=\"text-2xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                TradePro\n              </span>\n            </div>\n            <p className=\"text-muted-foreground mb-6 leading-relaxed\">\n              Advanced trading platform empowering traders with AI-powered bots, expert signals, \n              and comprehensive market analysis tools.\n            </p>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex items-center space-x-3\">\n                <MapPin className=\"w-4 h-4 text-primary\" />\n                <span>New York, NY 10001, USA</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Phone className=\"w-4 h-4 text-primary\" />\n                <span>+1 (555) 123-4567</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Mail className=\"w-4 h-4 text-primary\" />\n                <span>support@tradepro.com</span>\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Trading Features */}\n          <motion.div variants={fadeInUp}>\n            <h3 className=\"text-lg font-bold mb-6\">Trading Features</h3>\n            <ul className=\"space-y-4\">\n              <li className=\"flex items-center space-x-3 group cursor-pointer\">\n                <Bot className=\"w-4 h-4 text-primary group-hover:text-accent transition-colors\" />\n                <span className=\"group-hover:text-primary transition-colors\">AI Trading Bots</span>\n              </li>\n              <li className=\"flex items-center space-x-3 group cursor-pointer\">\n                <Zap className=\"w-4 h-4 text-primary group-hover:text-accent transition-colors\" />\n                <span className=\"group-hover:text-primary transition-colors\">Live Trading Signals</span>\n              </li>\n              <li className=\"flex items-center space-x-3 group cursor-pointer\">\n                <Users className=\"w-4 h-4 text-primary group-hover:text-accent transition-colors\" />\n                <span className=\"group-hover:text-primary transition-colors\">Copy Expert Traders</span>\n              </li>\n              <li className=\"flex items-center space-x-3 group cursor-pointer\">\n                <BarChart3 className=\"w-4 h-4 text-primary group-hover:text-accent transition-colors\" />\n                <span className=\"group-hover:text-primary transition-colors\">Market Analysis</span>\n              </li>\n              <li className=\"flex items-center space-x-3 group cursor-pointer\">\n                <Bitcoin className=\"w-4 h-4 text-primary group-hover:text-accent transition-colors\" />\n                <span className=\"group-hover:text-primary transition-colors\">Crypto Deposits</span>\n              </li>\n              <li className=\"flex items-center space-x-3 group cursor-pointer\">\n                <Shield className=\"w-4 h-4 text-primary group-hover:text-accent transition-colors\" />\n                <span className=\"group-hover:text-primary transition-colors\">Secure Withdrawals</span>\n              </li>\n            </ul>\n          </motion.div>\n\n          {/* Quick Links */}\n          <motion.div variants={fadeInUp}>\n            <h3 className=\"text-lg font-bold mb-6\">Quick Links</h3>\n            <ul className=\"space-y-4\">\n              {[\n                'Getting Started',\n                'Trading Guide',\n                'API Documentation',\n                'Security Features',\n                'Fees & Pricing',\n                'Mobile App',\n                'Help Center',\n                'Contact Support'\n              ].map((link) => (\n                <li key={link}>\n                  <a \n                    href=\"#\" \n                    className=\"text-muted-foreground hover:text-primary transition-colors cursor-pointer\"\n                  >\n                    {link}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </motion.div>\n\n          {/* Newsletter */}\n          <motion.div variants={fadeInUp}>\n            <h3 className=\"text-lg font-bold mb-6\">Stay Updated</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Get the latest market insights and trading tips delivered to your inbox.\n            </p>\n            <div className=\"space-y-4\">\n              <div className=\"flex space-x-2\">\n                <Input \n                  placeholder=\"Your email address\" \n                  className=\"flex-1\"\n                />\n                <Button>\n                  Subscribe\n                </Button>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                By subscribing, you agree to our Privacy Policy and Terms of Service.\n              </p>\n            </div>\n\n            {/* Social Links */}\n            <div className=\"mt-8\">\n              <p className=\"text-sm font-medium mb-4\">Follow Us</p>\n              <div className=\"flex space-x-4\">\n                {[\n                  { icon: Twitter, label: 'Twitter' },\n                  { icon: Facebook, label: 'Facebook' },\n                  { icon: Linkedin, label: 'LinkedIn' },\n                  { icon: Instagram, label: 'Instagram' }\n                ].map(({ icon: Icon, label }) => (\n                  <a\n                    key={label}\n                    href=\"#\"\n                    className=\"w-10 h-10 bg-muted/20 hover:bg-primary/10 rounded-lg flex items-center justify-center transition-colors group\"\n                    aria-label={label}\n                  >\n                    <Icon className=\"w-4 h-4 text-muted-foreground group-hover:text-primary transition-colors\" />\n                  </a>\n                ))}\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n\n        {/* Trust Badges */}\n        <motion.div\n          className=\"mt-16 pt-12 border-t\"\n          initial={{ opacity: 0 }}\n          whileInView={{ opacity: 1 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n        >\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 items-center\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Shield className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <p className=\"text-sm font-medium\">Bank-Level Security</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Users className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <p className=\"text-sm font-medium\">100K+ Active Users</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-purple-100 dark:bg-purple-900/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <BarChart3 className=\"w-8 h-8 text-purple-600\" />\n              </div>\n              <p className=\"text-sm font-medium\">Real-Time Analytics</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-orange-100 dark:bg-orange-900/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Bitcoin className=\"w-8 h-8 text-orange-600\" />\n              </div>\n              <p className=\"text-sm font-medium\">Multi-Asset Support</p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n\nexport function FooterBottom() {\n  return (\n    <footer className=\"py-8 bg-muted/50 border-t\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0\">\n          <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n            <span>© 2024 TradePro. All rights reserved.</span>\n            <Separator orientation=\"vertical\" className=\"h-4\" />\n            <span>Licensed & Regulated</span>\n          </div>\n          \n          <div className=\"flex items-center space-x-6 text-sm\">\n            {[\n              'Privacy Policy',\n              'Terms of Service', \n              'Cookie Policy',\n              'Disclaimer',\n              'Risk Warning'\n            ].map((link) => (\n              <a\n                key={link}\n                href=\"#\"\n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n              >\n                {link}\n              </a>\n            ))}\n          </div>\n        </div>\n        \n        <Separator className=\"my-6\" />\n        \n        <div className=\"text-center\">\n          <p className=\"text-xs text-muted-foreground leading-relaxed max-w-4xl mx-auto\">\n            <strong>Risk Warning:</strong> Trading cryptocurrencies and financial instruments involves substantial risk and may result in the loss of your invested capital. \n            You should not invest more than you can afford to lose and should ensure that you fully understand the risks involved. \n            Past performance is not indicative of future results. This platform is for educational and informational purposes only.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":10739},"client/src/components/testimonials.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Star, Quote } from \"lucide-react\";\n\ninterface Testimonial {\n  id: string;\n  name: string;\n  role: string;\n  company: string;\n  content: string;\n  rating: number;\n  avatar?: string;\n  verified: boolean;\n}\n\nconst testimonials: Testimonial[] = [\n  {\n    id: \"1\",\n    name: \"Sarah Chen\",\n    role: \"Portfolio Manager\",\n    company: \"Invest Capital\",\n    content: \"The trading bots have revolutionized my investment strategy. I've seen consistent returns while spending less time monitoring markets. The copy trading feature is particularly impressive.\",\n    rating: 5,\n    verified: true\n  },\n  {\n    id: \"2\", \n    name: \"Michael Rodriguez\",\n    role: \"Day Trader\",\n    company: \"Independent\",\n    content: \"Best trading platform I've used. The signals are incredibly accurate and the Bitcoin deposit system is seamless. Made over $50k in profits this quarter alone.\",\n    rating: 5,\n    verified: true\n  },\n  {\n    id: \"3\",\n    name: \"Emma Thompson\",\n    role: \"Crypto Investor\",\n    company: \"BlockChain Ventures\",\n    content: \"The expert copy trading changed my trading game completely. Following top traders has given me exposure to strategies I never would have discovered on my own.\",\n    rating: 5,\n    verified: true\n  },\n  {\n    id: \"4\",\n    name: \"David Park\",\n    role: \"Financial Advisor\",\n    company: \"Wealth Solutions\",\n    content: \"I recommend this platform to all my clients. The market analysis tools are professional-grade and the withdrawal process is faster than traditional brokers.\",\n    rating: 5,\n    verified: true\n  },\n  {\n    id: \"5\",\n    name: \"Lisa Johnson\", \n    role: \"Algorithmic Trader\",\n    company: \"Quant Strategies\",\n    content: \"The bot automation is sophisticated yet user-friendly. I can customize strategies and the risk management features give me confidence in volatile markets.\",\n    rating: 5,\n    verified: true\n  },\n  {\n    id: \"6\",\n    name: \"James Wilson\",\n    role: \"Retail Investor\", \n    company: \"Personal Trading\",\n    content: \"Started with just $1000 and now managing $25k portfolio. The educational resources and expert signals helped me learn while earning. Couldn't be happier.\",\n    rating: 5,\n    verified: true\n  }\n];\n\nconst fadeInUp = {\n  initial: { opacity: 0, y: 30 },\n  animate: { opacity: 1, y: 0 },\n  transition: { duration: 0.6 }\n};\n\nconst staggerContainer = {\n  animate: {\n    transition: {\n      staggerChildren: 0.1\n    }\n  }\n};\n\nexport function Testimonials() {\n  return (\n    <section className=\"py-20 bg-gradient-to-b from-background to-muted/20\">\n      <div className=\"container mx-auto px-6\">\n        <motion.div\n          className=\"text-center mb-16\"\n          {...fadeInUp}\n        >\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4\">\n            Trusted by <span className=\"text-primary\">10,000+</span> Traders\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            See what our users say about their trading success with our platform\n          </p>\n        </motion.div>\n\n        <motion.div\n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\"\n          variants={staggerContainer}\n          initial=\"initial\"\n          whileInView=\"animate\"\n          viewport={{ once: true }}\n        >\n          {testimonials.map((testimonial) => (\n            <motion.div key={testimonial.id} variants={fadeInUp}>\n              <Card className=\"glass-card h-full border-0 shadow-lg hover:shadow-xl transition-shadow duration-300\">\n                <CardContent className=\"p-8\">\n                  <div className=\"flex items-start justify-between mb-6\">\n                    <Quote className=\"w-8 h-8 text-primary/30\" />\n                    <div className=\"flex items-center space-x-1\">\n                      {[...Array(testimonial.rating)].map((_, i) => (\n                        <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-muted-foreground mb-8 leading-relaxed\">\n                    \"{testimonial.content}\"\n                  </p>\n                  \n                  <div className=\"flex items-center space-x-4\">\n                    <Avatar className=\"h-12 w-12\">\n                      <AvatarImage src={testimonial.avatar} />\n                      <AvatarFallback className=\"bg-primary/10 text-primary font-medium\">\n                        {testimonial.name.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <h4 className=\"font-semibold\">{testimonial.name}</h4>\n                        {testimonial.verified && (\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\" title=\"Verified User\" />\n                        )}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {testimonial.role}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {testimonial.company}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </motion.div>\n\n        {/* Trust Indicators */}\n        <motion.div\n          className=\"mt-16 grid grid-cols-1 md:grid-cols-4 gap-8\"\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n        >\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-primary mb-2\">$2.5B+</div>\n            <div className=\"text-sm text-muted-foreground\">Total Volume Traded</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-primary mb-2\">500K+</div>\n            <div className=\"text-sm text-muted-foreground\">Successful Trades</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-primary mb-2\">99.9%</div>\n            <div className=\"text-sm text-muted-foreground\">Uptime</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-primary mb-2\">24/7</div>\n            <div className=\"text-sm text-muted-foreground\">Customer Support</div>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}","size_bytes":6809},"client/src/pages/market-analysis.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ChartWidget } from \"@/components/chart-widget\";\nimport { authService } from \"@/lib/auth\";\nimport { \n  BarChart3,\n  ArrowLeft,\n  TrendingUp,\n  TrendingDown,\n  Activity,\n  Target,\n  AlertTriangle,\n  CheckCircle,\n  DollarSign,\n  Zap\n} from \"lucide-react\";\n\ninterface MarketAnalysis {\n  symbol: string;\n  name: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  volume: number;\n  marketCap: number;\n  analysis: {\n    recommendation: 'BUY' | 'SELL' | 'HOLD';\n    confidence: number;\n    supportLevel: number;\n    resistanceLevel: number;\n    rsi: number;\n    macd: string;\n    sentiment: 'Bullish' | 'Bearish' | 'Neutral';\n  };\n  news: Array<{\n    title: string;\n    summary: string;\n    impact: 'positive' | 'negative' | 'neutral';\n    timestamp: string;\n  }>;\n}\n\ninterface MarketIndices {\n  sp500: { value: number; change: number; };\n  nasdaq: { value: number; change: number; };\n  dow: { value: number; change: number; };\n  vix: { value: number; change: number; };\n}\n\nexport default function MarketAnalysisPage() {\n  const [, navigate] = useLocation();\n  const [selectedSymbol, setSelectedSymbol] = useState(\"AAPL\");\n\n  useEffect(() => {\n    if (!authService.isAuthenticated()) {\n      navigate(\"/signin\");\n    }\n  }, [navigate]);\n\n  const { data: marketData, isLoading } = useQuery<MarketAnalysis[]>({\n    queryKey: [\"/api/market/analysis\"],\n    enabled: authService.isAuthenticated(),\n    refetchInterval: 30000,\n  });\n\n  const { data: indices } = useQuery<MarketIndices>({\n    queryKey: [\"/api/market/indices\"],\n    enabled: authService.isAuthenticated(),\n    refetchInterval: 60000,\n  });\n\n  const selectedStock = marketData?.find(stock => stock.symbol === selectedSymbol) || marketData?.[0];\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate(\"/dashboard\")}\n            className=\"p-2\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n          </Button>\n          <div className=\"flex items-center space-x-3\">\n            <BarChart3 className=\"w-8 h-8 text-primary\" />\n            <h1 className=\"text-3xl font-bold\">Market Analysis</h1>\n          </div>\n        </div>\n      </div>\n\n      {/* Market Indices Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        {indices && Object.entries(indices).map(([key, data]) => (\n          <Card key={key} className=\"glass-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium uppercase\">{key}</p>\n                  <p className=\"text-lg font-bold\">{data.value.toLocaleString()}</p>\n                </div>\n                <div className={`flex items-center space-x-1 ${\n                  data.change >= 0 ? 'text-green-500' : 'text-red-500'\n                }`}>\n                  {data.change >= 0 ? (\n                    <TrendingUp className=\"w-4 h-4\" />\n                  ) : (\n                    <TrendingDown className=\"w-4 h-4\" />\n                  )}\n                  <span className=\"text-sm font-medium\">\n                    {data.change >= 0 ? '+' : ''}{data.change}%\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid lg:grid-cols-4 gap-6\">\n        {/* Stock List */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle>Top Stocks</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {marketData?.map((stock) => (\n                  <div\n                    key={stock.symbol}\n                    onClick={() => setSelectedSymbol(stock.symbol)}\n                    className={`p-3 rounded-lg cursor-pointer transition-colors ${\n                      selectedSymbol === stock.symbol\n                        ? 'bg-primary/10 border border-primary/20'\n                        : 'bg-muted/20 hover:bg-muted/30'\n                    }`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">{stock.symbol}</p>\n                        <p className=\"text-xs text-muted-foreground truncate\">{stock.name}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-medium\">${stock.price}</p>\n                        <p className={`text-xs ${\n                          stock.changePercent >= 0 ? 'text-green-500' : 'text-red-500'\n                        }`}>\n                          {stock.changePercent >= 0 ? '+' : ''}{stock.changePercent.toFixed(2)}%\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Analysis */}\n        <div className=\"lg:col-span-3 space-y-6\">\n          {selectedStock && (\n            <>\n              {/* Stock Header */}\n              <Card className=\"glass-card\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h2 className=\"text-2xl font-bold\">{selectedStock.symbol}</h2>\n                      <p className=\"text-muted-foreground\">{selectedStock.name}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-3xl font-bold\">${selectedStock.price.toLocaleString()}</p>\n                      <div className={`flex items-center space-x-1 ${\n                        selectedStock.changePercent >= 0 ? 'text-green-500' : 'text-red-500'\n                      }`}>\n                        {selectedStock.changePercent >= 0 ? (\n                          <TrendingUp className=\"w-4 h-4\" />\n                        ) : (\n                          <TrendingDown className=\"w-4 h-4\" />\n                        )}\n                        <span>\n                          {selectedStock.changePercent >= 0 ? '+' : ''}{selectedStock.change.toFixed(2)} \n                          ({selectedStock.changePercent.toFixed(2)}%)\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Analysis Tabs */}\n              <Tabs defaultValue=\"analysis\" className=\"space-y-6\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"analysis\">Technical Analysis</TabsTrigger>\n                  <TabsTrigger value=\"chart\">Price Chart</TabsTrigger>\n                  <TabsTrigger value=\"news\">Market News</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"analysis\" className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    {/* Recommendation */}\n                    <Card className=\"glass-card\">\n                      <CardHeader>\n                        <CardTitle>AI Recommendation</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <Badge\n                              variant={\n                                selectedStock.analysis.recommendation === 'BUY' ? 'default' :\n                                selectedStock.analysis.recommendation === 'SELL' ? 'destructive' :\n                                'secondary'\n                              }\n                              className=\"text-lg px-4 py-2\"\n                            >\n                              {selectedStock.analysis.recommendation === 'BUY' && <TrendingUp className=\"w-4 h-4 mr-2\" />}\n                              {selectedStock.analysis.recommendation === 'SELL' && <TrendingDown className=\"w-4 h-4 mr-2\" />}\n                              {selectedStock.analysis.recommendation === 'HOLD' && <Activity className=\"w-4 h-4 mr-2\" />}\n                              {selectedStock.analysis.recommendation}\n                            </Badge>\n                            <div className=\"text-right\">\n                              <p className=\"text-sm text-muted-foreground\">Confidence</p>\n                              <p className=\"text-xl font-bold\">{selectedStock.analysis.confidence}%</p>\n                            </div>\n                          </div>\n                          <div className=\"space-y-2 text-sm\">\n                            <div className=\"flex justify-between\">\n                              <span>Sentiment:</span>\n                              <Badge variant={\n                                selectedStock.analysis.sentiment === 'Bullish' ? 'default' :\n                                selectedStock.analysis.sentiment === 'Bearish' ? 'destructive' :\n                                'secondary'\n                              }>\n                                {selectedStock.analysis.sentiment}\n                              </Badge>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    {/* Technical Indicators */}\n                    <Card className=\"glass-card\">\n                      <CardHeader>\n                        <CardTitle>Technical Indicators</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-4\">\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <p className=\"text-sm text-muted-foreground\">Support Level</p>\n                              <p className=\"text-lg font-bold text-green-500\">\n                                ${selectedStock.analysis.supportLevel}\n                              </p>\n                            </div>\n                            <div>\n                              <p className=\"text-sm text-muted-foreground\">Resistance Level</p>\n                              <p className=\"text-lg font-bold text-red-500\">\n                                ${selectedStock.analysis.resistanceLevel}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span>RSI (14):</span>\n                              <span className={`font-medium ${\n                                selectedStock.analysis.rsi > 70 ? 'text-red-500' :\n                                selectedStock.analysis.rsi < 30 ? 'text-green-500' :\n                                'text-muted-foreground'\n                              }`}>\n                                {selectedStock.analysis.rsi}\n                                {selectedStock.analysis.rsi > 70 && ' (Overbought)'}\n                                {selectedStock.analysis.rsi < 30 && ' (Oversold)'}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span>MACD:</span>\n                              <span className={`font-medium ${\n                                selectedStock.analysis.macd === 'Bullish' ? 'text-green-500' : 'text-red-500'\n                              }`}>\n                                {selectedStock.analysis.macd}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"chart\">\n                  <Card className=\"glass-card\">\n                    <CardHeader>\n                      <CardTitle>Price Chart - {selectedStock.symbol}</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ChartWidget height={400} />\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"news\">\n                  <Card className=\"glass-card\">\n                    <CardHeader>\n                      <CardTitle>Market News</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {selectedStock.news.map((newsItem, index) => (\n                          <div key={index} className=\"border-l-4 border-l-primary/20 pl-4 space-y-2\">\n                            <div className=\"flex items-center justify-between\">\n                              <h4 className=\"font-medium\">{newsItem.title}</h4>\n                              <Badge\n                                variant={\n                                  newsItem.impact === 'positive' ? 'default' :\n                                  newsItem.impact === 'negative' ? 'destructive' :\n                                  'secondary'\n                                }\n                              >\n                                {newsItem.impact === 'positive' && <TrendingUp className=\"w-3 h-3 mr-1\" />}\n                                {newsItem.impact === 'negative' && <TrendingDown className=\"w-3 h-3 mr-1\" />}\n                                {newsItem.impact === 'neutral' && <Activity className=\"w-3 h-3 mr-1\" />}\n                                {newsItem.impact}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">{newsItem.summary}</p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {new Date(newsItem.timestamp).toLocaleString()}\n                            </p>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15542}},"version":1}